using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using MRIV.Models;
using MRIV.Services;
using MRIV.ViewModels;

namespace MRIV.Controllers
{
    public class ApprovalsController : Controller
    {
        private readonly RequisitionContext _context;
        private readonly IEmployeeService _employeeService;
        private readonly VendorService _vendorService;
        private readonly IDepartmentService _departmentService;
        private readonly IApprovalService _approvalService;

        public ApprovalsController(RequisitionContext context, IEmployeeService employeeService, VendorService vendorService,
            IApprovalService approvalService, IConfiguration configuration, IDepartmentService departmentService)
        {
            _context = context;
            _employeeService = employeeService;
            _vendorService = vendorService;
            _approvalService = approvalService;
            _departmentService = departmentService;
           
        }

        // GET: Approvals
        public async Task<IActionResult> Index()
        {
            var approvals = await _context.Approvals
                .Include(a => a.Requisition)
                .OrderBy(a => a.RequisitionId)
                .ThenBy(a => a.StepNumber)
                .ToListAsync();

            // Convert approvals to view models
            var viewModels = new List<ApprovalStepViewModel>();

            foreach (var approval in approvals)
            {
                // Get employee and department information
                var employee = await _employeeService.GetEmployeeByPayrollAsync(approval.PayrollNo);
                var department = await _departmentService.GetDepartmentByIdAsync(approval.DepartmentId);

                // Create the view model
                viewModels.Add(new ApprovalStepViewModel
                {
                    // Existing approval properties
                    Id = approval.Id, // You may need to add this property to your view model
                    RequisitionId = approval.RequisitionId, // You may need to add this property
                    StepNumber = approval.StepNumber,
                    ApprovalStep = approval.ApprovalStep,
                    PayrollNo = approval.PayrollNo,
                    EmployeeName = employee?.Fullname ?? "Unknown",
                    DepartmentId = approval.DepartmentId,
                    DepartmentName = department?.DepartmentName ?? "Unknown Department",
                    ApprovalStatus = approval.ApprovalStatus,
                    CreatedAt = approval.CreatedAt,

                    // Add employee designation if needed
                    EmployeeDesignation = employee?.Designation ?? "" // You may need to add this property
                });
            }

            return View(viewModels);
        }

        // GET: Approvals/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var approval = await _context.Approvals
                .Include(a => a.Requisition)
                .Include(a => a.StepConfig)
                .Include(a => a.WorkflowConfig)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (approval == null)
            {
                return NotFound();
            }

            return View(approval);
        }

        // GET: Approvals/Create
        public IActionResult Create()
        {
            ViewData["RequisitionId"] = new SelectList(_context.Requisitions, "Id", "DeliveryStation");
            ViewData["StepConfigId"] = new SelectList(_context.WorkflowStepConfigs, "Id", "ApproverRole");
            ViewData["WorkflowConfigId"] = new SelectList(_context.WorkflowConfigs, "Id", "DeliveryStationCategory");
            return View();
        }

        // POST: Approvals/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,RequisitionId,WorkflowConfigId,StepConfigId,DepartmentId,StepNumber,ApprovalStep,PayrollNo,ApprovalStatus,Comments,IsAutoGenerated,CreatedAt,UpdatedAt")] Approval approval)
        {
            if (ModelState.IsValid)
            {
                _context.Add(approval);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["RequisitionId"] = new SelectList(_context.Requisitions, "Id", "DeliveryStation", approval.RequisitionId);
            ViewData["StepConfigId"] = new SelectList(_context.WorkflowStepConfigs, "Id", "ApproverRole", approval.StepConfigId);
            ViewData["WorkflowConfigId"] = new SelectList(_context.WorkflowConfigs, "Id", "DeliveryStationCategory", approval.WorkflowConfigId);
            return View(approval);
        }

        // GET: Approvals/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var approval = await _context.Approvals.FindAsync(id);
            if (approval == null)
            {
                return NotFound();
            }
            ViewData["RequisitionId"] = new SelectList(_context.Requisitions, "Id", "DeliveryStation", approval.RequisitionId);
            ViewData["StepConfigId"] = new SelectList(_context.WorkflowStepConfigs, "Id", "ApproverRole", approval.StepConfigId);
            ViewData["WorkflowConfigId"] = new SelectList(_context.WorkflowConfigs, "Id", "DeliveryStationCategory", approval.WorkflowConfigId);
            return View(approval);
        }

        // POST: Approvals/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,RequisitionId,WorkflowConfigId,StepConfigId,DepartmentId,StepNumber,ApprovalStep,PayrollNo,ApprovalStatus,Comments,IsAutoGenerated,CreatedAt,UpdatedAt")] Approval approval)
        {
            if (id != approval.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(approval);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ApprovalExists(approval.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["RequisitionId"] = new SelectList(_context.Requisitions, "Id", "DeliveryStation", approval.RequisitionId);
            ViewData["StepConfigId"] = new SelectList(_context.WorkflowStepConfigs, "Id", "ApproverRole", approval.StepConfigId);
            ViewData["WorkflowConfigId"] = new SelectList(_context.WorkflowConfigs, "Id", "DeliveryStationCategory", approval.WorkflowConfigId);
            return View(approval);
        }

        // GET: Approvals/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var approval = await _context.Approvals
                .Include(a => a.Requisition)
                .Include(a => a.StepConfig)
                .Include(a => a.WorkflowConfig)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (approval == null)
            {
                return NotFound();
            }

            return View(approval);
        }

        // POST: Approvals/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var approval = await _context.Approvals.FindAsync(id);
            if (approval != null)
            {
                _context.Approvals.Remove(approval);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ApprovalExists(int id)
        {
            return _context.Approvals.Any(e => e.Id == id);
        }
    }
}
