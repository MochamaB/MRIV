@using MRIV.Enums
@using MRIV.Helpers
@using MRIV.ViewModels
@model IEnumerable<MRIV.ViewModels.EmployeeViewModel>

@{
    ViewData["Title"] = "Employees";
    var departmentNames = ViewBag.DepartmentNames as Dictionary<string, string>;
    var stationNames = ViewBag.StationNames as Dictionary<string, string>;
    var pagination = ViewBag.Pagination as MRIV.ViewModels.PaginationViewModel;
    var totalCount = ViewBag.TotalCount;
    var startNumber = ((pagination.CurrentPage - 1) * pagination.ItemsPerPage) + 1;
    var currentSortField = ViewBag.SortField;
    var currentSortOrder = ViewBag.SortOrder;
    var searchTerm = ViewBag.SearchTerm as string;
    
    // Get filter values from query string
    var departmentFilter = ViewBag.DepartmentFilter as string ?? Context.Request.Query["Department"].ToString();
    var stationFilter = ViewBag.StationFilter as string ?? Context.Request.Query["Station"].ToString();
    var roleFilter = ViewBag.RoleFilter as string ?? Context.Request.Query["Role"].ToString();
    var designationFilter = ViewBag.DesignationFilter as string ?? Context.Request.Query["Designation"].ToString();
    
    // Helper function to generate sort URL
    Func<string, string> GetSortUrl = (string field) => {
        var newSortOrder = field.Equals(currentSortField, StringComparison.OrdinalIgnoreCase) && currentSortOrder == "asc" ? "desc" : "asc";
        return Url.Action("Index", "Employees", new { 
            page = pagination.CurrentPage, 
            sortField = field, 
            sortOrder = newSortOrder, 
            searchTerm = ViewBag.SearchTerm,
            Department = ViewBag.DepartmentFilter,
            Station = ViewBag.StationFilter,
            Role = ViewBag.RoleFilter,
            Designation = ViewBag.DesignationFilter
        });
    };

    
    // Helper function to get sort icon
    Func<string, string> GetSortIcon = (string field) => {
        if (!field.Equals(currentSortField, StringComparison.OrdinalIgnoreCase))
            return "mdi mdi-sort text-muted";
            
        return currentSortOrder == "asc" ? "mdi mdi-sort-ascending text-success" : "mdi mdi-sort-descending text-danger";
    };
}

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header border-bottom-dashed" style="padding:1rem 0rem">
                <div class="d-flex align-items-center">
                    <h5 class="card-title mb-0 flex-grow-1">Employees (@totalCount total)</h5>
                    <div class="flex-shrink-0">
                        <div class="d-flex gap-2 flex-wrap">
                            <div class="search-box">
                                <input type="text" class="form-control search" placeholder="Search..." value="@searchTerm">
                                <i class="ri-search-line search-icon"></i>
                            </div>

                            <!-- Filter Toggle Button -->
                            @await Html.PartialAsync("_FilterToggleButton")

                            <a href="@Url.Action("Create", "Employees")" class="btn btn-primary btn-sm d-flex align-items-center py-2">
                                <i class="ri-add-line align-bottom me-1"></i> Add Employee
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters Partial View -->
            @await Html.PartialAsync("_Filters", (FilterViewModel)ViewBag.Filters)

            <!-- Table Content -->
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered align-middle mb-0 table-hover">
                        <thead>
                            <tr class="table-light">
                                <th>#</th>
                                <th>
                                    <a href="@GetSortUrl("PayrollNo")" class="text-primary">
                                        Payroll No
                                        <i class="@GetSortIcon("PayrollNo") ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="@GetSortUrl("Fullname")" class="d-flex align-items-center text-primary">
                                        Full Name
                                        <i class="@GetSortIcon("Fullname") ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="@GetSortUrl("Designation")" class="d-flex align-items-center text-primary">
                                        Designation
                                        <i class="@GetSortIcon("Designation") ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="@GetSortUrl("Department")" class="d-flex align-items-center text-primary">
                                        Department
                                        <i class="@GetSortIcon("Department") ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="@GetSortUrl("Station")" class="d-flex align-items-center text-primary">
                                        Station
                                        <i class="@GetSortIcon("Station") ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="@GetSortUrl("Role")" class="d-flex align-items-center text-primary">
                                        Role
                                        <i class="@GetSortIcon("Role") ms-1"></i>
                                    </a>
                                </th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.Any())
                            {
                                int rowNumber = startNumber;
                                foreach (var employee in Model)
                                {
                                    <tr class="clickable-row @(employee.EmpisCurrActive != 0 ? "text-muted" : "")" data-href="@Url.Action("Details", "Employees", new { id = employee.PayrollNo, rollNo = employee.RollNo })">
                                        <td>@(rowNumber++)</td>
                                        <td><a href="@Url.Action("Details", "Employees", new { id = employee.PayrollNo, rollNo = employee.RollNo })" class="fw-bold @(employee.EmpisCurrActive != 0 ? "text-muted" : "")">
                                        @employee.PayrollNo</a></td>
                                        <td>@employee.FullName</td>
                                        <td>@(string.IsNullOrEmpty(employee.Designation) ? "-" : employee.Designation)</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(employee.Department) && !string.IsNullOrEmpty(employee.DepartmentName))
                                            {
                                                <div class="font-weight-bold pb-2">@employee.DepartmentName</div>
                                                <small class="text-muted">@employee.Department</small>
                                            }
                                            else if (!string.IsNullOrEmpty(employee.Department))
                                            {
                                                <span>@employee.Department</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(employee.Station) && !string.IsNullOrEmpty(employee.StationName))
                                            {
                                                <div class="font-weight-bold pb-2">@employee.StationName</div>
                                                <small class="text-muted">@employee.Station</small>
                                            }
                                            else if (!string.IsNullOrEmpty(employee.Station))
                                            {
                                                <span>@employee.Station</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(employee.Role))
                                            {
                                                <span class="text-primary @(employee.EmpisCurrActive != 0 ? "text-muted" : "")">@employee.Role</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="d-flex gap-2 align-items-center">
                                                <a href="@Url.Action("Details", "Employees", new { id = employee.PayrollNo, rollNo = employee.RollNo })" class="btn btn-sm btn-soft-primary"><i class="mdi mdi-eye-outline"></i></a>
                                                <a href="@Url.Action("Edit", "Employees", new { id = employee.PayrollNo, rollNo = employee.RollNo })" class="btn btn-sm btn-soft-warning"><i class="mdi mdi-pencil-outline"></i></a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="8" class="text-center">
                                        @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(departmentFilter) || !string.IsNullOrEmpty(stationFilter) || !string.IsNullOrEmpty(roleFilter))
                                        {
                                            <div class="p-3">
                                                <div class="text-center">
                                                    <i class="ri-search-line display-5 text-muted"></i>
                                                    <h5 class="mt-2">No results found for the current filters</h5>
                                                    <p class="text-muted">Try adjusting your search criteria</p>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="p-3">No employees found.</div>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                @if (pagination.TotalItems > pagination.ItemsPerPage)
                {
                    <div class="d-flex justify-content-end mt-3">
                        <nav aria-label="Page navigation">
                            <ul class="pagination">
                                @if (pagination.CurrentPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action(pagination.Action, pagination.Controller, new { page = 1, sortField = currentSortField, sortOrder = currentSortOrder, searchTerm = ViewBag.SearchTerm, Department = ViewBag.DepartmentFilter, Station = ViewBag.StationFilter, Role = ViewBag.RoleFilter, Designation = ViewBag.DesignationFilter })" aria-label="First">
                                            <span aria-hidden="true">&laquo;&laquo;</span>
                                        </a>
                                    </li>
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action(pagination.Action, pagination.Controller, new { page = pagination.CurrentPage - 1, sortField = currentSortField, sortOrder = currentSortOrder, searchTerm = ViewBag.SearchTerm, Department = ViewBag.DepartmentFilter, Station = ViewBag.StationFilter, Role = ViewBag.RoleFilter, Designation = ViewBag.DesignationFilter })" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                                }

                                @{
                                    int totalPages = (int)Math.Ceiling((double)pagination.TotalItems / pagination.ItemsPerPage);
                                    int startPage = Math.Max(1, pagination.CurrentPage - 2);
                                    int endPage = Math.Min(totalPages, startPage + 4);
                                    startPage = Math.Max(1, endPage - 4);
                                }

                                @for (int i = startPage; i <= endPage; i++)
                                {
                                    <li class="page-item @(i == pagination.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="@Url.Action(pagination.Action, pagination.Controller, new { page = i, sortField = currentSortField, sortOrder = currentSortOrder, searchTerm = ViewBag.SearchTerm, Department = ViewBag.DepartmentFilter, Station = ViewBag.StationFilter, Role = ViewBag.RoleFilter, Designation = ViewBag.DesignationFilter })">@i</a>
                                    </li>
                                }

                                @if (pagination.CurrentPage < totalPages)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action(pagination.Action, pagination.Controller, new { page = pagination.CurrentPage + 1, sortField = currentSortField, sortOrder = currentSortOrder, searchTerm = ViewBag.SearchTerm, Department = ViewBag.DepartmentFilter, Station = ViewBag.StationFilter, Role = ViewBag.RoleFilter, Designation = ViewBag.DesignationFilter })" aria-label="Next">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action(pagination.Action, pagination.Controller, new { page = totalPages, sortField = currentSortField, sortOrder = currentSortOrder, searchTerm = ViewBag.SearchTerm, Department = ViewBag.DepartmentFilter, Station = ViewBag.StationFilter, Role = ViewBag.RoleFilter, Designation = ViewBag.DesignationFilter })" aria-label="Last">
                                            <span aria-hidden="true">&raquo;&raquo;</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            })

            // Toggle filter section
            $("#toggleFilters").click(function () {
                $("#filterSection").slideToggle();
                $(this).find("i").toggleClass("mdi-chevron-down mdi-chevron-up");
            });
            
            // Make rows clickable
            $(".clickable-row").click(function(e) {
                // Don't navigate if clicking on a link or button
                if (!$(e.target).is('a') && !$(e.target).is('button') && 
                    !$(e.target).parent().is('a') && !$(e.target).parent().is('button') &&
                    !$(e.target).hasClass('mdi') && !$(e.target).parent().hasClass('mdi')) {
                    window.location = $(this).data("href");
                }
            });
            
            // Add hover effect to clickable rows
            $(".clickable-row").hover(
                function() {
                    $(this).addClass('table-hover-custom');
                },
                function() {
                    $(this).removeClass('table-hover-custom');
                }
            );
        });
    </script>
    
    <style>
        .clickable-row {
            cursor: pointer;
        }
        
        .table-hover-custom {
            background-color: rgba(0, 123, 255, 0.05) !important;
        }
        
        .badge {
            font-size: 85%;
            font-weight: 500;
            padding: 0.35em 0.65em;
        }
    </style>
}
