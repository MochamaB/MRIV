<!-- Views/Shared/_NotificationDropdown.cshtml -->
@using MRIV.Extensions
@model List<Notification>


<div class="dropdown-menu dropdown-menu-right notification-dropdown">
    <div class="dropdown-header">
        <h6 class="notification-title">Notifications</h6>
        <a href="@Url.Action("Index", "Notifications")" class="text-muted">View All</a>
    </div>
    <div class="dropdown-divider"></div>
    <div class="notification-scroll">
        @if (Model.Any())
        {
            foreach (var notification in Model.Take(5))
            {
                <a href="@(notification.URL ?? Url.Action("Index", "Notifications"))" class="dropdown-item notification-item @(notification.IsRead ? "" : "unread")" data-id="@notification.Id">
                    <div class="media">
                        <div class="media-left">
                            <div class="notification-icon @GetIconClass(notification.NotificationType)">
                                <i class="@GetIcon(notification.NotificationType)"></i>
                            </div>
                        </div>
                        <div class="media-body">
                            <h6 class="notification-title">@notification.Title</h6>
                            <p class="notification-text">@notification.Message</p>
                            <p class="notification-time">@notification.CreatedAt.ToRelativeTimeString()</p>
                        </div>
                    </div>
                </a>
            }
        }
        else
        {
            <div class="dropdown-item no-notifications">
                <p class="text-muted text-center">No unread notifications</p>
            </div>
        }
    </div>
</div>

@functions {
    string GetIconClass(string type)
    {
        return type?.ToLower() switch
        {
            "approval" => "bg-success",
            "rejection" => "bg-danger",
            "dispatch" => "bg-primary",
            "receipt" => "bg-info",
            _ => "bg-secondary"
        };
    }

    string GetIcon(string type)
    {
        return type?.ToLower() switch
        {
            "approval" => "mdi mdi-check-circle",
            "rejection" => "mdi mdi-close-circle",
            "dispatch" => "mdi mdi-truck",
            "receipt" => "mdi mdi-package",
            "requisition" => "mdi mdi-file-document",
            _ => "mdi mdi-bell"
        };
    }
}