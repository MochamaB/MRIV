@{
    ViewData["Title"] = "Create Requisition Wizard";
    var currentStep = ViewBag.CurrentStep as string;
    @model MRIV.ViewModels.MaterialRequisitionWizardViewModel

}

<style>

    .numberwizard {
        margin: 50px auto;
        width: 90%;
    }

        .numberwizard.progresschart {
            counter-reset: step;
        }

            .numberwizard.progresschart ul {
                display: flex;
                justify-content: space-between;
                padding: 0;
                position: relative;
            }

                .numberwizard.progresschart ul::before {
                    content: '';
                    position: absolute;
                    top: 25px;
                    left: 10px;
                    width: 95%;
                    height: 4px;
                    background: #ddd;
                    background: linear-gradient(to right, #324721 0%, #324721 var(--progress, 0%), #ddd var(--progress, 0%), #ddd 100%);
                    z-index: 1;
                }

                .numberwizard.progresschart ul li {
                    list-style: none;
                    text-align: center;
                   
                    position: relative;
                    z-index: 2;
                }

                    .numberwizard.progresschart ul li::before {
                        content: counter(step);
                        counter-increment: step;
                        width: 50px;
                        height: 50px;
                        border: 2px solid #ddd;
                        display: block;
                        margin: 0 auto 10px;
                        border-radius: 50%;
                        line-height: 50px;
                        background: white;
                        color: #333;
                        font-weight: bold;
                        font-size:17px;
                    }


                    .numberwizard.progresschart ul li::after {
                        content: attr(data-title);
                        display: block;
                        font-size: 17px;
                        font-weight:600;
                        color: grey;
                    }

                    .numberwizard.progresschart ul li.active::before {
                        border-color: #324721;
                        background: #324721;
                        color: white;
                    }

                    .numberwizard.progresschart ul li.active::after {
                        font-size: 17px;
                        font-weight: 600;
                        color: #324721;
                    }

                    .numberwizard.progresschart ul li.completed::before {
                        border-color: #324721;
                        background: #324721;
                        color: white;
                    }

                    .numberwizard.progresschart ul li.completed::after {
                        font-size: 17px;
                        font-weight: 600;
                        color: #324721;
                    }

</style>
<div class=" contwrapper">
    <!-- Top Navigation -->
    <div class="numberwizard progresschart">
        <ul>
            @foreach (var step in Model.Steps)
            {
                <li class="@(step.IsActive ? "active" : step.IsCompleted ? "completed" : "")" data-title="@step.StepName">
                   
                </li>
            }
        </ul>
    </div>
    <!-- Dynamic Content -->
    <div id="stepContent">
        
        <!-- Content for the current step will go here -->
        @await Html.PartialAsync($"{Model.PartialBasePath}_{Model.Steps.FirstOrDefault(s => s.IsActive)?.StepName.Replace(" ", "")}.cshtml")
    </div>
</div>
@section Scripts {
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const steps = document.querySelectorAll('.numberwizard.progresschart ul li');
        const progressLine = document.querySelector('.numberwizard.progresschart ul');

        let completedSteps = 0;
        steps.forEach(step => {
            if (step.classList.contains('completed')) {
                completedSteps++;
            }
        });

        const progressPercentage = (completedSteps / (steps.length - 1)) * 100;
        progressLine.style.setProperty('--progress', progressPercentage + '%');
    });
</script>
}

           

