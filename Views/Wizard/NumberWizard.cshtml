@{
    ViewData["Title"] = "Create Requisition Wizard";
    var currentStep = ViewBag.CurrentStep as string;
    @model MRIV.ViewModels.MaterialRequisitionWizardViewModel

}

<style>

    .numberwizard {
        margin: 50px auto;
        width: 90%;
    }

        .numberwizard.progresschart {
            counter-reset: step;
        }

            .numberwizard.progresschart ul {
                display: flex;
                justify-content: space-between;
                padding: 0;
                position: relative;
            }

                .numberwizard.progresschart ul::before {
                    content: '';
                    position: absolute;
                    top: 25px;
                    left: 10px;
                    width: 95%;
                    height: 4px;
                    background: #ddd;
                    background: linear-gradient(to right, #324721 0%, #324721 var(--progress, 0%), #ddd var(--progress, 0%), #ddd 100%);
                    z-index: 1;
                }

                .numberwizard.progresschart ul li {
                    list-style: none;
                    text-align: center;
                   
                    position: relative;
                    z-index: 2;
                }

                    .numberwizard.progresschart ul li::before {
                        content: counter(step);
                        counter-increment: step;
                        width: 50px;
                        height: 50px;
                        border: 2px solid #ddd;
                        display: block;
                        margin: 0 auto 10px;
                        border-radius: 50%;
                        line-height: 50px;
                        background: white;
                        color: #333;
                        font-weight: bold;
                        font-size:17px;
                    }


                    .numberwizard.progresschart ul li::after {
                        content: attr(data-title);
                        display: block;
                        font-size: 17px;
                        font-weight:600;
                        color: grey;
                    }

                    .numberwizard.progresschart ul li.active::before {
                        border-color: #324721;
                        background: #324721;
                        color: white;
                    }

                    .numberwizard.progresschart ul li.active::after {
                        font-size: 17px;
                        font-weight: 600;
                        color: #324721;
                    }

                    .numberwizard.progresschart ul li.completed::before {
                        border-color: #324721;
                        background: #324721;
                        color: white;
                    }

                    .numberwizard.progresschart ul li.completed::after {
                        font-size: 17px;
                        font-weight: 600;
                        color: #324721;
                    }

</style>
<div class=" contwrapper">
    <!-- Top Navigation -->
    <div class="numberwizard progresschart">
        <ul>
            @foreach (var step in Model.Steps)
            {
                <li class="@(step.IsActive ? "active" : step.IsCompleted ? "completed" : "")" data-title="@step.StepName">
                   
                </li>
            }
        </ul>
    </div>
    <!-- Dynamic Content -->
    <div id="stepContent">
        
        <!-- Content for the current step will go here -->
        @await Html.PartialAsync($"{Model.PartialBasePath}_{Model.Steps.FirstOrDefault(s => s.IsActive)?.StepName.Replace(" ", "").Replace("&", "")}.cshtml")
    </div>
</div>
@section Scripts {
    <!-- Wizard Navigation Script -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const progressLine = document.querySelector('.numberwizard.progresschart ul');
            const steps = @Html.Raw(Json.Serialize(Model.Steps));
            const currentStepName = '@Model.Steps.FirstOrDefault(s => s.IsActive)?.StepName'.trim();
            let currentStepIndex = steps.findIndex(step => step.stepName.trim().toLowerCase() === currentStepName.toLowerCase());

            // Function to Update Progress Bar
            function updateProgressBar() {
                let completedSteps = currentStepIndex;
                const progressPercentage = (completedSteps / (steps.length - 1)) * 100;
                progressLine.style.setProperty('--progress', progressPercentage + '%');
            }

            // Initial Progress Bar Update
            updateProgressBar();

            // Handle "Previous Step" button click
            $(".wizardpreviousBtn").click(function (event) {
                event.preventDefault();

                // Get the form element
                const form = $(this).closest('form');

                // Add a hidden input for direction
                if (!form.find('input[name="direction"]').length) {
                    form.append('<input type="hidden" name="direction" value="previous">');
                } else {
                    form.find('input[name="direction"]').val('previous');
                }

                // Submit the form to the current action
                form.submit();
            });

            // Function to Update Navigation Buttons
            function updateNavButtons() {
                if (currentStepIndex === 0) {
                    $(".wizardpreviousBtn").hide();
                } else {
                    $(".wizardpreviousBtn").show();
                }

                if (currentStepIndex === steps.length - 1) {
                    $(".nextbutton").html('<i class="mdi mdi-arrow-right-bold-circle mdi-24"> Complete Requisition </i>');
                } else {
                    $(".nextbutton").html('<i class="mdi mdi-arrow-right-bold-circle mdi-24"> Next Step </i>');
                }
            }

            // Initial Navigation Button Update
            updateNavButtons();
        });
    </script>

    <!--  Script for the Ticket Search -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchbar');
            const clearButton = document.getElementById('clearSearch');
            const dataTable = document.getElementById('searchResults');
            let timeoutId;

            // Debounce function to limit AJAX calls
            function debounce(func, delay) {
                return function (...args) {
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => func.apply(this, args), delay);
                };
            }

            // Handle search input
            const handleSearch = debounce(function (searchTerm) {
                fetch(`/MaterialRequisition/Ticket?search=${encodeURIComponent(searchTerm)}`, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                    .then(response => response.text())
                    .then(html => {
                        dataTable.innerHTML = html;
                    })
                    .catch(error => console.error('Error:', error));
            }, 300);

            // Show/Hide clear button & handle search
            searchInput.addEventListener('input', function (e) {
                const searchTerm = e.target.value.trim();

                // Show "X" button if there's input, otherwise hide it
                if (searchTerm.length > 0) {
                    clearButton.classList.remove('d-none');
                } else {
                    clearButton.classList.add('d-none');
                }

                // Trigger search when input length is 2 or more
                if (searchTerm.length >= 2 || searchTerm.length === 0) {
                    handleSearch(searchTerm);
                }
            });

            // Clear input on "X" button click
            clearButton.addEventListener('click', function () {
                searchInput.value = '';
                clearButton.classList.add('d-none'); // Hide the "X" button
                handleSearch(''); // Perform empty search to reset results
            });

            // Prevent form submission (if inside a form)
            const searchForm = document.getElementById('searchForm');
            if (searchForm) {
                searchForm.addEventListener('submit', function (e) {
                    e.preventDefault();
                    handleSearch(searchInput.value.trim());
                });
            }
        });

    </script>

    <!-- Load The requistion Locations Script -->
   <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Elements
            const issueCategory = document.getElementById('issueStationCategory');
            const issueStation = document.getElementById('issueStation');
            const deliveryCategory = document.getElementById('deliveryStationCategory');
            const deliveryStation = document.getElementById('deliveryStation');

            // Load locations based on category selection
            function loadLocations(categoryDropdown, locationDropdown) {
                const category = categoryDropdown.value;

                // If no category is selected, clear the location dropdown and return
                if (!category) {
                    locationDropdown.innerHTML = '<option value="">Select Location</option>';
                    return;
                }

                // Get current selection if any
                const currentSelection = locationDropdown.value;

                // Set loading state
                locationDropdown.innerHTML = '<option value="">Loading...</option>';

                // Fetch new options via AJAX
                fetch(`/MaterialRequisition/GetLocationsForCategory?category=${category}&selectedValue=${currentSelection}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Clear loading option
                        locationDropdown.innerHTML = '<option value="">Select Location</option>';

                        // Populate dropdown with received data
                        if (data && Array.isArray(data)) {
                            data.forEach(item => {
                                const option = document.createElement('option');
                                option.value = item.value;
                                option.textContent = item.text;
                                if (item.value === currentSelection) {
                                    option.selected = true;
                                }
                                locationDropdown.appendChild(option);
                            });
                        }

                        // Trigger dispatch section visibility check if it exists
                        if (typeof toggleDispatchSection === 'function') {
                            toggleDispatchSection();
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching locations:', error);
                        locationDropdown.innerHTML = '<option value="">Error loading options</option>';
                    });
            }

            // Set up event listeners
            if (issueCategory) {
                issueCategory.addEventListener('change', () => loadLocations(issueCategory, issueStation));

                // Initialize if category already selected
                if (issueCategory.value) {
                    loadLocations(issueCategory, issueStation);
                }
            }

            if (deliveryCategory) {
                deliveryCategory.addEventListener('change', () => loadLocations(deliveryCategory, deliveryStation));

                // Initialize if category already selected
                if (deliveryCategory.value) {
                    loadLocations(deliveryCategory, deliveryStation);
                }
            }
        });
   </script>

    <!-- Dynamic Resize text Areas script -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            function autoResize(textarea) {
                textarea.style.height = 'auto';
                textarea.style.height = textarea.scrollHeight + 'px';
            }

            const textarea = document.querySelector('.auto-resize-textarea');
            if (textarea) {
                textarea.addEventListener('input', function () {
                    autoResize(this);
                });
                autoResize(textarea); // Initialize on page load
            }
        });
    </script>
    <!-- Dispatch Visibility Scripts -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const issueCategory = document.getElementById('issueStationCategory');
            const deliveryCategory = document.getElementById('deliveryStationCategory');
            const dispatchSection = document.getElementById('dispatch');
            const dispatchType = document.getElementById('dispatchType');
            const dispatchPayrollNo = document.getElementById('dispatchPayrollNo');
            const dispatchVendor = document.getElementById('dispatchVendor');

            function shouldShowDispatch() {
                const issueVal = issueCategory.value.toLowerCase();
                const deliveryVal = deliveryCategory.value.toLowerCase();

                return issueVal === 'headoffice' &&
                    (deliveryVal === 'factory' || deliveryVal === 'region' || deliveryVal === 'vendor');
            }

            function toggleDispatchSection() {
                const shouldShow = shouldShowDispatch();

                if (shouldShow) {
                    dispatchSection.style.display = 'block';
                    dispatchType.removeAttribute("disabled");
                    dispatchType.setAttribute("required", "true"); // Add required attribute
                } else {
                    dispatchSection.style.display = 'none';
                    dispatchType.removeAttribute("required"); // Remove required attribute
                    dispatchType.value = "";
                    dispatchType.setAttribute("disabled", "true");
                    // ... rest of your code
                }
            }

            // Toggle subfields based on dispatch type
            function toggleDispatchSubFields() {
                const adminField = document.querySelector('.admin-field');
                const vendorField = document.querySelector('.vendor-field');

                if (dispatchType.value === 'admin') {
                    adminField.style.display = 'block';
                    vendorField.style.display = 'none';
                    dispatchPayrollNo.removeAttribute("disabled");
                    dispatchVendor.setAttribute("disabled", "true");
                } else if (dispatchType.value === 'vendor') {
                    vendorField.style.display = 'block';
                    adminField.style.display = 'none';
                    dispatchVendor.removeAttribute("disabled");
                    dispatchPayrollNo.setAttribute("disabled", "true");
                } else {
                    adminField.style.display = 'none';
                    vendorField.style.display = 'none';
                    dispatchPayrollNo.setAttribute("disabled", "true");
                    dispatchVendor.setAttribute("disabled", "true");
                }
            }

            // Initial check on page load
            toggleDispatchSection();
            toggleDispatchSubFields();

            // Add event listeners
            issueCategory.addEventListener('change', toggleDispatchSection);
            deliveryCategory.addEventListener('change', toggleDispatchSection);
            dispatchType.addEventListener('change', toggleDispatchSubFields);
        });

    </script>
      
  
   

}

           

