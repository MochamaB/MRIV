@{
    ViewData["Title"] = "Create Requisition Wizard";
    var currentStep = ViewBag.CurrentStep as string;
    @model MRIV.ViewModels.MaterialRequisitionWizardViewModel

}

<style>

    .numberwizard {
        margin: 50px auto;
        width: 90%;
    }

        .numberwizard.progresschart {
            counter-reset: step;
        }

            .numberwizard.progresschart ul {
                display: flex;
                justify-content: space-between;
                padding: 0;
                position: relative;
            }

                .numberwizard.progresschart ul::before {
                    content: '';
                    position: absolute;
                    top: 25px;
                    left: 10px;
                    width: 95%;
                    height: 4px;
                    background: #ddd;
                    background: linear-gradient(to right, #324721 0%, #324721 var(--progress, 0%), #ddd var(--progress, 0%), #ddd 100%);
                    z-index: 1;
                }

                .numberwizard.progresschart ul li {
                    list-style: none;
                    text-align: center;
                   
                    position: relative;
                    z-index: 2;
                }

                    .numberwizard.progresschart ul li::before {
                        content: counter(step);
                        counter-increment: step;
                        width: 50px;
                        height: 50px;
                        border: 2px solid #ddd;
                        display: block;
                        margin: 0 auto 10px;
                        border-radius: 50%;
                        line-height: 50px;
                        background: white;
                        color: #333;
                        font-weight: bold;
                        font-size:17px;
                    }


                    .numberwizard.progresschart ul li::after {
                        content: attr(data-title);
                        display: block;
                        font-size: 17px;
                        font-weight:600;
                        color: grey;
                    }

                    .numberwizard.progresschart ul li.active::before {
                        border-color: #324721;
                        background: #324721;
                        color: white;
                    }

                    .numberwizard.progresschart ul li.active::after {
                        font-size: 17px;
                        font-weight: 600;
                        color: #324721;
                    }

                    .numberwizard.progresschart ul li.completed::before {
                        border-color: #324721;
                        background: #324721;
                        color: white;
                    }

                    .numberwizard.progresschart ul li.completed::after {
                        font-size: 17px;
                        font-weight: 600;
                        color: #324721;
                    }

</style>
<div class=" contwrapper">
    <!-- Top Navigation -->
    <div class="numberwizard progresschart">
        <ul>
            @foreach (var step in Model.Steps)
            {
                <li class="@(step.IsActive ? "active" : step.IsCompleted ? "completed" : "")" data-title="@step.StepName">
                   
                </li>
            }
        </ul>
    </div>
    <!-- Dynamic Content -->
    <div id="stepContent">
        
        <!-- Content for the current step will go here -->
        @await Html.PartialAsync($"{Model.PartialBasePath}_{Model.Steps.FirstOrDefault(s => s.IsActive)?.StepName.Replace(" ", "")}.cshtml")
    </div>
</div>
@section Scripts {
    <!-- Wizard Navigation Script -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const progressLine = document.querySelector('.numberwizard.progresschart ul');
            const steps = @Html.Raw(Json.Serialize(Model.Steps));
            const currentStepName = '@Model.Steps.FirstOrDefault(s => s.IsActive)?.StepName'.trim();
            let currentStepIndex = steps.findIndex(step => step.stepName.trim().toLowerCase() === currentStepName.toLowerCase());

            // 🚀 Function to Update Progress Bar
            function updateProgressBar() {
                let completedSteps = currentStepIndex;
                const progressPercentage = (completedSteps / (steps.length - 1)) * 100;
                progressLine.style.setProperty('--progress', progressPercentage + '%');
                console.log("Progress Updated:", progressPercentage + "%");
            }

            // 🚀 Initial Progress Bar Update
            updateProgressBar();

            // 🚀 Handle "Previous Step" button click
            $(".wizardpreviousBtn").click(function (event) {
                event.preventDefault(); // Prevent form submission

                if (currentStepIndex > 0) {
                    currentStepIndex--; // Move to previous step
                    const previousStep = steps[currentStepIndex]?.stepName?.replace(/\s+/g, ''); // Safely access stepName
                    if (!previousStep) {
                        console.error("Invalid step detected while moving to the previous step.");
                        return;
                    }
                    console.log("⬅ Moving to Previous Step:", previousStep);

                    // Update URL without refreshing the page
                    history.pushState({}, '', `/MaterialRequisition/${previousStep}`);

                    // Reload only the step content via AJAX
                    $("#stepContent").load(`/MaterialRequisition/${previousStep} #stepContent`, function () {
                        updateProgressBar(); // Update progress after loading
                        updateNavButtons(); // Update button visibility
                    });
                } else {
                    console.warn("Already at the first step. Cannot move further back.");
                }
            });

            // 🚀 Handle "Next Step" button click (form submission)
            $(".nextbutton").click(function () {
                if (currentStepIndex < steps.length - 1) {
                    currentStepIndex++; // Move to next step
                    const nextStep = steps[currentStepIndex]?.stepName?.replace(/\s+/g, ''); // Safely access stepName
                    if (!nextStep) {
                        console.error("Invalid step detected while moving to the next step.");
                        return;
                    }
                    console.log("➡ Moving to Next Step:", nextStep);

                    // Submit the form for server-side validation and navigation
                    $(this).closest("form").submit();
                } else {
                    console.warn("Already at the last step. Completing requisition.");
                }
            });

            // 🚀 Function to Update Navigation Buttons
            function updateNavButtons() {
                if (currentStepIndex === 0) {
                    $(".wizardpreviousBtn").hide(); // Hide "Previous" button on the first step
                } else {
                    $(".wizardpreviousBtn").show(); // Show "Previous" button otherwise
                }

                if (currentStepIndex === steps.length - 1) {
                    $(".nextbutton").html('<i class="mdi mdi-arrow-right-bold-circle mdi-24"> Complete Requisition </i>');
                } else {
                    $(".nextbutton").html('<i class="mdi mdi-arrow-right-bold-circle mdi-24"> Next Step </i>');
                }
            }

            // 🚀 Initial Navigation Button Update
            updateNavButtons();
        });
    </script>

    <!--  Script for the Ticket Search -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            const dataTable = document.getElementById('dataTable');
            let timeoutId;

            // Debounce function to limit AJAX calls
            function debounce(func, delay) {
                return function (...args) {
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => func.apply(this, args), delay);
                };
            }

            // Handle search input
            const handleSearch = debounce(function (searchTerm) {
                fetch(`/MaterialRequisition/Ticket?search=${encodeURIComponent(searchTerm)}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                    .then(response => response.text())
                    .then(html => {
                        dataTable.innerHTML = html;
                    })
                    .catch(error => console.error('Error:', error));
            }, 300);

            searchInput.addEventListener('input', function (e) {
                const searchTerm = e.target.value.trim();
                if (searchTerm.length >= 2 || searchTerm.length === 0) {
                    handleSearch(searchTerm);
                }
            });

            // Prevent form submission
            document.getElementById('searchForm').addEventListener('submit', function (e) {
                e.preventDefault();
                handleSearch(searchInput.value.trim());
            });
        });
    </script>

    <!-- Load The requistion Locations Script -->
    <script>

        document.addEventListener("DOMContentLoaded", function () {
        // Serialize data
        const allStations = @Html.Raw(Json.Serialize(Model.Stations));
        const allDepartments = @Html.Raw(Json.Serialize(Model.Departments));
        const userDepartment = @Html.Raw(Json.Serialize(Model.Department));
        const userStation = @Html.Raw(Json.Serialize(Model.Station));

            // Initialize elements
            const deliveryCategory = document.getElementById('deliveryStationCategory');
            const deliveryStation = document.getElementById('deliveryStation');
            const issueCategory = document.getElementById('issueStationCategory');
            const issueStation = document.getElementById('issueStation');


            // Generic population function with selection preservation
            function populateDropdown(dropdown, items, valueField, textField, selectedValue) {
                dropdown.innerHTML = '<option value="">Select Station</option>';
                items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item[valueField];
                    option.textContent = item[textField];
                    if (item[valueField] === selectedValue) {
                        option.selected = true;
                    }
                    dropdown.appendChild(option);
                });
            }

            // ======== Delivery Station Logic ========
            function handleDeliveryCategoryChange() {
                const category = deliveryCategory.value.toLowerCase();
                const selectedValue = "@(Model.Requisition?.DeliveryStation ?? "")";

                switch (category) {
                    case 'region':
                        const regionStations = allStations.filter(s =>
                            s.stationName.toLowerCase().includes('region')
                        );
                        populateDropdown(deliveryStation, regionStations, 'stationName', 'stationName', selectedValue);
                        break;

                    case 'factory':
                        const factoryStations = allStations.filter(s =>
                            !s.stationName.toLowerCase().includes('region') &&
                            !s.stationName.toLowerCase().includes('zonal')
                        );
                        populateDropdown(deliveryStation, factoryStations, 'stationName', 'stationName', selectedValue);
                        break;
                    case 'headoffice':
                        populateDropdown(deliveryStation, allDepartments, 'departmentName', 'departmentName');
                        break;
                    case 'vendor':
                        const externalVendors = [
                            { stationId: 'external', stationName: 'External Vendor' }
                        ];
                        populateDropdown(deliveryStation, externalVendors, 'stationId', 'stationName');
                        break;

                    default:
                        console.warn("[Delivery] Unhandled category:", this.value);

                    // ... other cases ...
                }
            }

            // Initialize and set up listener
            deliveryCategory.addEventListener('change', handleDeliveryCategoryChange);
            handleDeliveryCategoryChange(); // Trigger on page load

            // ======== Issue Station Logic ========
            function handleIssueCategoryChange() {
                const category = issueCategory.value.toLowerCase();
                const selectedValue = issueStation.value;

                switch (category) {
                    case 'headoffice':
                        populateDropdown(issueStation, allDepartments, 'departmentName', 'departmentName', selectedValue);
                        break;

                    case 'region':
                        const regionStations = allStations.filter(s =>
                            s.stationName.toLowerCase().includes('region')
                        );
                        populateDropdown(issueStation, regionStations, 'stationName', 'stationName', selectedValue);
                        break;
                    case 'factory':
                        const factoryStations = allStations.filter(s =>
                            !s.stationName.toLowerCase().includes('region') &&
                            !s.stationName.toLowerCase().includes('zonal')
                        );
                        populateDropdown(issueStation, factoryStations, 'stationName', 'stationName');
                        break;
                    // ... other cases ...
                }
            }

            // Initialize and set up listener
            issueCategory.addEventListener('change', handleIssueCategoryChange);
            handleIssueCategoryChange(); // Trigger on page load

            // ======== Initial User Setup ========
            function initializeUserSettings() {
                const userStationName = userStation?.stationName?.toLowerCase() || '';

                if (userStationName === 'hq') {
                    issueCategory.value = 'headoffice';
                    populateDropdown(issueStation, allDepartments, 'departmentName', 'departmentName');
                    if (userDepartment) {
                        issueStation.value = userDepartment.departmentName;
                    }
                } else {
                    // ... existing user station logic ...
                    // Determine if the user's station is a region/factory
                    if (userStation.toLowerCase().includes("region")) {
                        issueCategory.value = "region";
                        const regionStations = allStations.filter(s =>
                            s.stationName.toLowerCase().includes('region')
                        );
                        populateDropdown(issueStation, regionStations, 'stationName', 'stationName');
                    } else {
                        issueCategory.value = "factory";
                        const factoryStations = allStations.filter(s =>
                            !s.stationName.toLowerCase().includes('region') &&
                            !s.stationName.toLowerCase().includes('zonal')
                        );
                        populateDropdown(issueStation, factoryStations, 'stationName', 'stationName');
                    }
                    if (userStation) {
                        issueStationDropdown.value = userStation.stationName;
                    }
                }
            }

            initializeUserSettings();
        });
    </script>

    <!-- Dynamic Resize text Areas script -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            function autoResize(textarea) {
                textarea.style.height = 'auto';
                textarea.style.height = textarea.scrollHeight + 'px';
            }

            const textarea = document.querySelector('.auto-resize-textarea');
            if (textarea) {
                textarea.addEventListener('input', function () {
                    autoResize(this);
                });
                autoResize(textarea); // Initialize on page load
            }
        });
    </script>
    <!-- Dispatch Visibility Scripts -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const issueCategory = document.getElementById('issueStationCategory');
            const deliveryCategory = document.getElementById('deliveryStationCategory');
            const dispatchSection = document.getElementById('dispatch');
            const dispatchType = document.getElementById('dispatchType');
            const dispatchPayrollNo = document.getElementById('dispatchPayrollNo');
            const dispatchVendor = document.getElementById('dispatchVendor');

            function shouldShowDispatch() {
                const issueVal = issueCategory.value.toLowerCase();
                const deliveryVal = deliveryCategory.value.toLowerCase();

                return issueVal === 'headoffice' &&
                    (deliveryVal === 'factory' || deliveryVal === 'region' || deliveryVal === 'vendor');
            }

            function toggleDispatchSection() {
                const shouldShow = shouldShowDispatch();

                if (shouldShow) {
                    dispatchSection.style.display = 'block';
                    dispatchType.removeAttribute("disabled");
                    dispatchType.setAttribute("required", "true"); // Add required attribute
                } else {
                    dispatchSection.style.display = 'none';
                    dispatchType.removeAttribute("required"); // Remove required attribute
                    dispatchType.value = "";
                    dispatchType.setAttribute("disabled", "true");
                    // ... rest of your code
                }
            }

            // Toggle subfields based on dispatch type
            function toggleDispatchSubFields() {
                const adminField = document.querySelector('.admin-field');
                const vendorField = document.querySelector('.vendor-field');

                if (dispatchType.value === 'admin') {
                    adminField.style.display = 'block';
                    vendorField.style.display = 'none';
                    dispatchPayrollNo.removeAttribute("disabled");
                    dispatchVendor.setAttribute("disabled", "true");
                } else if (dispatchType.value === 'vendor') {
                    vendorField.style.display = 'block';
                    adminField.style.display = 'none';
                    dispatchVendor.removeAttribute("disabled");
                    dispatchPayrollNo.setAttribute("disabled", "true");
                } else {
                    adminField.style.display = 'none';
                    vendorField.style.display = 'none';
                    dispatchPayrollNo.setAttribute("disabled", "true");
                    dispatchVendor.setAttribute("disabled", "true");
                }
            }

            // Initial check on page load
            toggleDispatchSection();
            toggleDispatchSubFields();

            // Add event listeners
            issueCategory.addEventListener('change', toggleDispatchSection);
            deliveryCategory.addEventListener('change', toggleDispatchSection);
            dispatchType.addEventListener('change', toggleDispatchSubFields);
        });

    </script>
      
    <!--  REquisition Item Material Modal-->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const inventoryModal = document.getElementById('inventoryModal');
            const saveInventoryBtn = document.getElementById('saveInventoryDetails');
            const saveToInventoryCheckbox = document.getElementById('saveToInventory');

            // Handle modal validation
            inventoryModal.addEventListener('shown.bs.modal', function () {
                // Reset validation on show
                Array.from(inventoryModal.querySelectorAll('.form-control')).forEach(input => {
                    input.classList.remove('is-invalid');
                });
            });

            // Save inventory details
            saveInventoryBtn.addEventListener('click', function () {
                let isValid = true;

                // Validate required fields
                const requiredFields = inventoryModal.querySelectorAll('[required]');
                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        field.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        field.classList.remove('is-invalid');
                    }
                });

                if (isValid) {
                    // Enable and check the checkbox
                    saveToInventoryCheckbox.disabled = false;
                    saveToInventoryCheckbox.checked = true;

                    // Close modal
                    bootstrap.Modal.getInstance(inventoryModal).hide();
                }
            });

            // Handle checkbox state
            saveToInventoryCheckbox.addEventListener('change', function () {
                if (!this.checked) {
                    // Clear inventory data if unchecked
                    inventoryModal.querySelectorAll('.form-control').forEach(input => {
                        input.value = '';
                    });
                    this.disabled = true;
                }
            });
        });
    </script>

}

           

