@{
    ViewData["Title"] = "Create Requisition Wizard";
    var currentStep = ViewBag.CurrentStep as string;
    @model MRIV.ViewModels.MaterialRequisitionWizardViewModel

}

<style>

    .numberwizard {
        margin: 50px auto;
        width: 90%;
    }

        .numberwizard.progresschart {
            counter-reset: step;
        }

            .numberwizard.progresschart ul {
                display: flex;
                justify-content: space-between;
                padding: 0;
                position: relative;
            }

                .numberwizard.progresschart ul::before {
                    content: '';
                    position: absolute;
                    top: 25px;
                    left: 10px;
                    width: 95%;
                    height: 4px;
                    background: #ddd;
                    background: linear-gradient(to right, #324721 0%, #324721 var(--progress, 0%), #ddd var(--progress, 0%), #ddd 100%);
                    z-index: 1;
                }

                .numberwizard.progresschart ul li {
                    list-style: none;
                    text-align: center;
                   
                    position: relative;
                    z-index: 2;
                }

                    .numberwizard.progresschart ul li::before {
                        content: counter(step);
                        counter-increment: step;
                        width: 50px;
                        height: 50px;
                        border: 2px solid #ddd;
                        display: block;
                        margin: 0 auto 10px;
                        border-radius: 50%;
                        line-height: 50px;
                        background: white;
                        color: #333;
                        font-weight: bold;
                        font-size:17px;
                    }


                    .numberwizard.progresschart ul li::after {
                        content: attr(data-title);
                        display: block;
                        font-size: 17px;
                        font-weight:600;
                        color: grey;
                    }

                    .numberwizard.progresschart ul li.active::before {
                        border-color: #324721;
                        background: #324721;
                        color: white;
                    }

                    .numberwizard.progresschart ul li.active::after {
                        font-size: 17px;
                        font-weight: 600;
                        color: #324721;
                    }

                    .numberwizard.progresschart ul li.completed::before {
                        border-color: #324721;
                        background: #324721;
                        color: white;
                    }

                    .numberwizard.progresschart ul li.completed::after {
                        font-size: 17px;
                        font-weight: 600;
                        color: #324721;
                    }
    
    .wizard-close-btn {
        position: absolute;
        top: 10px;
        right: 20px;
        cursor: pointer;
        background: transparent;
        border: none;
        z-index: 100;
    }
    
    .wizard-close-btn i {
        font-size: 1.8rem;
        color: #dc3545;
    }

</style>
<div class="contwrapper position-relative">
    <!-- Close Button -->
    <button type="button" class="wizard-close-btn" id="closeWizardBtn">
        <i class="mdi mdi-close-circle"></i>
    </button>
    
    <!-- Top Navigation -->
    <div class="numberwizard progresschart">
        <ul>
            @foreach (var step in Model.Steps)
            {
                <li class="@(step.IsActive ? "active" : step.IsCompleted ? "completed" : "")" data-title="@step.StepName">
                   
                </li>
            }
        </ul>
    </div>
    <!-- Dynamic Content -->
    <div id="stepContent">
        
        <!-- Content for the current step will go here -->
        @await Html.PartialAsync($"{Model.PartialBasePath}_{Model.Steps.FirstOrDefault(s => s.IsActive)?.StepName.Replace(" ", "").Replace("&", "")}.cshtml")
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="closeWizardModal" tabindex="-1" aria-labelledby="closeWizardModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-headercustom">
                <h5 class="modal-title" id="closeWizardModalLabel" style="color:white;">Close Wizard</h5>
                <button type="button" class="btn-close text-white" style="filter: invert(1);" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to close the wizard? All unsaved data will be lost.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmCloseWizard">Close Wizard</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Wizard Navigation Script -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const progressLine = document.querySelector('.numberwizard.progresschart ul');
            const steps = @Html.Raw(Json.Serialize(Model.Steps));
            const currentStepName = '@Model.Steps.FirstOrDefault(s => s.IsActive)?.StepName'.trim();
            let currentStepIndex = steps.findIndex(step => step.stepName.trim().toLowerCase() === currentStepName.toLowerCase());

            // Function to Update Progress Bar
            function updateProgressBar() {
                let completedSteps = currentStepIndex;
                const progressPercentage = (completedSteps / (steps.length - 1)) * 100;
                progressLine.style.setProperty('--progress', progressPercentage + '%');
            }

            // Initial Progress Bar Update
            updateProgressBar();

            // Handle "Previous Step" button click
            $(".wizardpreviousBtn").click(function (event) {
                event.preventDefault();

                // Get the form element
                const form = $(this).closest('form');

                // Add a hidden input for direction
                if (!form.find('input[name="direction"]').length) {
                    form.append('<input type="hidden" name="direction" value="previous">');
                } else {
                    form.find('input[name="direction"]').val('previous');
                }

                // Submit the form to the current action
                form.submit();
            });

            // Function to Update Navigation Buttons
            function updateNavButtons() {
                if (currentStepIndex === 0) {
                    $(".wizardpreviousBtn").hide();
                } else {
                    $(".wizardpreviousBtn").show();
                }

                if (currentStepIndex === steps.length - 1) {
                    $(".nextbutton").html('<i class="mdi mdi-arrow-right-bold-circle mdi-24"> Complete Requisition </i>');
                } else {
                    $(".nextbutton").html('<i class="mdi mdi-arrow-right-bold-circle mdi-24"> Next Step </i>');
                }
            }

            // Initial Navigation Button Update
            updateNavButtons();
            
            // Close Wizard Button Click
            $("#closeWizardBtn").click(function() {
                $('#closeWizardModal').modal('show');
            });
            
            // Confirm Close Wizard
            $("#confirmCloseWizard").click(function() {
                // Clear wizard session data
                $.ajax({
                    url: '/MaterialRequisition/ClearWizardSession',
                    type: 'POST',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function() {
                        // Redirect to requisitions list
                        window.location.href = '/Requisitions';
                    },
                    error: function() {
                        // Just redirect even if clearing session failed
                        window.location.href = '/Requisitions';
                    }
                });
            });
            
            // Intercept only sidebar navigation links
            $(document).on('click', '#navbar-nav a, .navbar-brand', function(e) {
                // Store the href
                const href = $(this).attr('href');
                
                // If it's an internal link (not external) and not a wizard navigation link
                if (href && !href.startsWith('#') && !href.startsWith('javascript') && 
                    !$(this).hasClass('no-confirm')) {
                    e.preventDefault();
                    
                    // Show the modal
                    $('#closeWizardModal').modal('show');
                    
                    // Update the confirm button to navigate to this link
                    $('#confirmCloseWizard').off('click').on('click', function() {
                        // Clear wizard session data
                        $.ajax({
                            url: '/MaterialRequisition/ClearWizardSession',
                            type: 'POST',
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function() {
                                // Navigate to the clicked link
                                window.location.href = href;
                            },
                            error: function() {
                                // Just navigate even if clearing session failed
                                window.location.href = href;
                            }
                        });
                    });
                    
                    return false;
                }
            });
            
            // Also handle the logo click
            $('.logo').on('click', function(e) {
                e.preventDefault();
                $('#closeWizardModal').modal('show');
                
                $('#confirmCloseWizard').off('click').on('click', function() {
                    $.ajax({
                        url: '/MaterialRequisition/ClearWizardSession',
                        type: 'POST',
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function() {
                            window.location.href = '/';
                        },
                        error: function() {
                            window.location.href = '/';
                        }
                    });
                });
            });
        });
    </script>

    <!--  Script for the Ticket Search -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
           
        });
    </script>

    <!-- Load The requistion Locations Script -->
   <script>
               document.addEventListener("DOMContentLoaded", function () {
            // Elements
            const issueCategory = document.getElementById('issueStationCategory');
            const issueStationId = document.getElementById('issueStationId');
            const issueDepartmentId = document.getElementById('issueDepartmentId');

            const deliveryCategory = document.getElementById('deliveryStationCategory');
            const deliveryStationId = document.getElementById('deliveryStationId');
            const deliveryDepartmentId = document.getElementById('deliveryDepartmentId');

            // Load locations based on category selection
            async function loadLocations(categoryDropdown, locationDropdown, isDelivery = false) {
                const category = categoryDropdown.value;

                // If no category is selected, clear the location dropdown and return
                if (!category) {
                    locationDropdown.innerHTML = '<option value="">Select Location</option>';
                    return;
                }

                // Get current selection if any
                const currentSelection = locationDropdown.value;

                // Set loading state
                locationDropdown.innerHTML = '<option value="">Loading...</option>';

                try {
                    // Determine if we're loading a department or station dropdown
                    const isDepartmentDropdown = locationDropdown === (isDelivery ? deliveryDepartmentId : issueDepartmentId);
                    const isStationDropdown = locationDropdown === (isDelivery ? deliveryStationId : issueStationId);
                    
                    // Load departments for department dropdowns
                    if (isDepartmentDropdown) {
                        // Always load departments for department dropdowns regardless of category
                        const response = await fetch('/Location/GetDepartmentsSelectList');
                        const data = await response.json();

                        locationDropdown.innerHTML = '<option value="">Select Department</option>';
                        data.forEach(item => {
                            const option = document.createElement('option');
                            option.value = item.value;
                            option.textContent = item.text;
                            if (item.value === currentSelection) {
                                option.selected = true;
                            }
                            locationDropdown.appendChild(option);
                        });
                    }
                    // Load stations for station dropdowns
                    else if (isStationDropdown) {
                        // Handle station dropdowns based on category
                        if (category.toLowerCase() === 'headoffice') {
                            // For headoffice, just set HQ as the station
                            locationDropdown.innerHTML = `
                                <option value="">Select Station</option>
                                <option value="0" ${currentSelection === "0" ? 'selected' : ''}>HQ</option>
                            `;
                        } else {
                            // For other categories, load stations with appropriate filtering
                            // Pass the category as a query parameter
                            const response = await fetch(`/Location/GetStationsSelectList?category=${encodeURIComponent(category)}`);
                            const data = await response.json();

                            locationDropdown.innerHTML = '<option value="">Select Station</option>';
                            
                            // Apply category-specific filtering
                            data.forEach(item => {
                                let shouldInclude = true;
                                
                                // For factory, exclude regions and zonals
                                if (category.toLowerCase() === 'factory') {
                                    shouldInclude = !item.text.toLowerCase().includes('region') &&
                                                  !item.text.toLowerCase().includes('zonal');
                                }
                                // For region, only include regions
                                else if (category.toLowerCase() === 'region') {
                                    shouldInclude = item.text.toLowerCase().includes('region');
                                }
                                
                                if (shouldInclude) {
                                    const option = document.createElement('option');
                                    option.value = item.value;
                                    option.textContent = item.text;
                                    if (item.value === currentSelection) {
                                        option.selected = true;
                                    }
                                    locationDropdown.appendChild(option);
                                }
                            });
                        }
                    }

                    // Trigger dispatch section visibility check if it exists
                    if (typeof toggleDispatchSection === 'function') {
                        toggleDispatchSection();
                    }
                } catch (error) {
                    console.error('Error fetching locations:', error);
                    locationDropdown.innerHTML = '<option value="">Error loading options</option>';
                }
            }

            // Set up event listeners
            if (issueCategory) {
                issueCategory.addEventListener('change', () => {
                    loadLocations(issueCategory, issueStationId);
                    loadLocations(issueCategory, issueDepartmentId);
                });

                // Initialize if category already selected
                if (issueCategory.value) {
                    loadLocations(issueCategory, issueStationId);
                    loadLocations(issueCategory, issueDepartmentId);
                }
            }

            if (deliveryCategory) {
                deliveryCategory.addEventListener('change', () => {
                    if (deliveryCategory.value.toLowerCase() === "headoffice") 
                    {
                        if (deliveryStationId) {
                            deliveryStationId.value = "0"; // HQ
                        }
                        if (deliveryDepartmentId) {
                            deliveryDepartmentId.value = "114"; // ICT department
                        }
                    }
                    loadLocations(deliveryCategory, deliveryStationId, true);
                    loadLocations(deliveryCategory, deliveryDepartmentId, true);
                });

                // Initialize if category already selected
                if (deliveryCategory.value) {
                    if (deliveryCategory.value.toLowerCase() === "headoffice") 
                    {
                        if (deliveryStationId) {
                            deliveryStationId.value = "0";
                        }
                        if (deliveryDepartmentId) {
                            deliveryDepartmentId.value = "114";
                        }
                    }
                    loadLocations(deliveryCategory, deliveryStationId, true);
                    loadLocations(deliveryCategory, deliveryDepartmentId, true);
                }
            }
        });
   </script>

    <!-- Dynamic Resize text Areas script -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            function autoResize(textarea) {
                textarea.style.height = 'auto';
                textarea.style.height = textarea.scrollHeight + 'px';
            }

            const textarea = document.querySelector('.auto-resize-textarea');
            if (textarea) {
                textarea.addEventListener('input', function () {
                    autoResize(this);
                });
                autoResize(textarea); // Initialize on page load
            }
        });
    </script>
    <!-- Dispatch Visibility Scripts -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const issueCategory = document.getElementById('issueStationCategory');
            const deliveryCategory = document.getElementById('deliveryStationCategory');
            const dispatchSection = document.getElementById('dispatch');
            const dispatchType = document.getElementById('dispatchType');
            const dispatchPayrollNo = document.getElementById('dispatchPayrollNo');
            const dispatchVendor = document.getElementById('dispatchVendor');
            // Check if elements exist and have values
            if (!issueCategory || !deliveryCategory) {
                console.log('Required elements not found');
                return false;
            }

            function shouldShowDispatch() {
                const issueVal = issueCategory.value.toLowerCase();
                const deliveryVal = deliveryCategory.value.toLowerCase();


                return issueVal === 'headoffice' &&
                    (deliveryVal === 'factory' || deliveryVal === 'region' || deliveryVal === 'vendor');
            }

            function toggleDispatchSection() {
                const shouldShow = shouldShowDispatch();

                if (shouldShow) {
                    dispatchSection.style.display = 'block';
                    dispatchType.removeAttribute("disabled");
                  //  dispatchType.setAttribute("required", "true"); // Add required attribute
                } else {
                    dispatchSection.style.display = 'none';
                    dispatchType.removeAttribute("required"); // Remove required attribute
                    dispatchType.value = "";
                    dispatchType.setAttribute("disabled", "true");
                    // ... rest of your code
                }
            }

            // Toggle subfields based on dispatch type
            function toggleDispatchSubFields() {
                const adminField = document.querySelector('.admin-field');
                const vendorField = document.querySelector('.vendor-field');

                if (dispatchType.value === 'admin') {
                    adminField.style.display = 'block';
                    vendorField.style.display = 'none';
                    dispatchPayrollNo.removeAttribute("disabled");
                    dispatchVendor.setAttribute("disabled", "true");
                } else if (dispatchType.value === 'vendor') {
                    vendorField.style.display = 'block';
                    adminField.style.display = 'none';
                    dispatchVendor.removeAttribute("disabled");
                    dispatchPayrollNo.setAttribute("disabled", "true");
                } else {
                    adminField.style.display = 'none';
                    vendorField.style.display = 'none';
                    dispatchPayrollNo.setAttribute("disabled", "true");
                    dispatchVendor.setAttribute("disabled", "true");
                }
            }

            // Initial check on page load
            toggleDispatchSection();
            toggleDispatchSubFields();

            // Add event listeners
            issueCategory.addEventListener('change', toggleDispatchSection);
            deliveryCategory.addEventListener('change', toggleDispatchSection);
            dispatchType.addEventListener('change', toggleDispatchSubFields);
        });

    </script>
    <!-- Scripts For Select Tickets View-->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Check if the select-ticket view is loaded
            if (document.querySelector('[data-view="select-ticket"]')) {
                // This code only runs when the approvers-receivers partial is loaded
                console.log('Select Ticket view detected');

                // Only run search-related code if elements exist
                const searchInput = document.getElementById('searchbar');
                const clearButton = document.getElementById('clearSearch');
                const dataTable = document.getElementById('searchResults');

                if (searchInput && clearButton && dataTable) {
                    let timeoutId;

                    // Debounce function to limit AJAX calls
                    function debounce(func, delay) {
                        return function (...args) {
                            clearTimeout(timeoutId);
                            timeoutId = setTimeout(() => func.apply(this, args), delay);
                        };
                    }

                    // Handle search input
                    const handleSearch = debounce(function (searchTerm) {
                        fetch(`/MaterialRequisition/Ticket?search=${encodeURIComponent(searchTerm)}`, {
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        })
                            .then(response => response.text())
                            .then(html => {
                                dataTable.innerHTML = html;
                            })
                            .catch(error => console.error('Error:', error));
                    }, 300);

                    // Show/Hide clear button & handle search
                    searchInput.addEventListener('input', function (e) {
                        const searchTerm = e.target.value.trim();

                        if (searchTerm.length > 0) {
                            clearButton.classList.remove('d-none');
                        } else {
                            clearButton.classList.add('d-none');
                        }

                        if (searchTerm.length >= 2 || searchTerm.length === 0) {
                            handleSearch(searchTerm);
                        }
                    });

                    // Clear input
                    clearButton.addEventListener('click', function () {
                        searchInput.value = '';
                        clearButton.classList.add('d-none');
                        handleSearch('');
                    });

                    // Form prevention
                    const searchForm = document.getElementById('searchForm');
                    if (searchForm) {
                        searchForm.addEventListener('submit', function (e) {
                            e.preventDefault();
                            handleSearch(searchInput.value.trim());
                        });
                    }
                } else {
                    console.log('Search elements not found - skipping search initialization');
                }
            }
        });
    </script>
                <!-- Scripts For Approvers Receivers View-->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Check if the approvers-receivers view is loaded
            if (document.querySelector('[data-view="approvers-receivers"]')) {
                // This code only runs when the approvers-receivers partial is loaded
                console.log('ApproversReceivers view detected');

                // Function to validate collector inputs
                function validateCollectorInputs() {
                    console.log('--- Validating collector inputs ---');
                    let isValid = true;

                    // Clear existing error messages
                    $('.form-group').find('.text-danger').text('');

                    // Get the input elements
                    const $nameInput = $('[name$=".CollectorName"]');
                    const $idInput = $('[name$=".CollectorId"]');

                    // Validate name
                    if (!$nameInput.val()) {
                        $nameInput.closest('.form-group').find('.text-danger').text('Collector name is required');
                        isValid = false;
                    } else if ($nameInput.val().trim().length < 3 || !/^[a-zA-Z\s'-]+$/.test($nameInput.val())) {
                        $nameInput.closest('.form-group').find('.text-danger').text('Please enter a valid name (at least 3 characters, letters only)');
                        isValid = false;
                    }

                    // Validate ID
                    if (!$idInput.val()) {
                        $idInput.closest('.form-group').find('.text-danger').text('Collector ID is required');
                        isValid = false;
                    } else if ($idInput.val().trim().length < 6 || !/^\d+$/.test($idInput.val())) {
                        $idInput.closest('.form-group').find('.text-danger').text('Please enter a valid ID number (at least 6 digits)');
                        isValid = false;
                    }

                    return isValid;
                }
                $('#wizardApprovers').off('submit').on('submit', function (e) {
                    if (!validateCollectorInputs()) {
                        e.preventDefault(); // Block submission
                        console.log('Validation failed');
                        return false;
                    }
                    // If valid, LET DEFAULT SUBMISSION PROCEED
                    console.log('Validation passed - allowing submission');
                    // Remove $(this).submit() - this causes infinite recursion
                    return true;
                });
            }
        });
    </script>
      
  
   

}

           
