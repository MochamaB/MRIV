@using MRIV.Enums
@using MRIV.Helpers
@using MRIV.ViewModels
@model IEnumerable<MRIV.Models.Material>


@{
    ViewData["Title"] = "Materials";
    var vendorNames = ViewBag.VendorNames as Dictionary<string, string>;
    var pagination = ViewBag.Pagination as PaginationViewModel;
}

<div class="row">
<div class="col-lg-12">
    <div class="card">
        <div class="card-header border-bottom-dashed" style="padding:1rem 0rem">
            <div class="d-flex align-items-center">
                <h5 class="card-title mb-0 flex-grow-1">Materials Inventory</h5>
                <div class="flex-shrink-0">
                    <div class="d-flex gap-2 flex-wrap">
                        <div class="search-box">
                            <input type="text" class="form-control search" placeholder="Search...">
                            <i class="ri-search-line search-icon"></i>
                        </div>

                        <!-- Filter Toggle Button -->
                        @await Html.PartialAsync("_FilterToggleButton")

                        <!-- Add other action buttons here -->
                        <a href="@Url.Action("Create", "Materials")" class="btn btn-primary">
                            <i class="ri-add-line align-bottom me-1"></i> New Material
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters Partial View -->
        @await Html.PartialAsync("_Filters", (FilterViewModel)ViewBag.Filters)

        <!-- Table Content -->
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered align-middle mb-0">
                    <thead>
                        <tr>
                            <th>
                                Id
                            </th>
                            <th style="width: 80px;">
                                Icon
                            </th>
                            <th>
                                Material Category
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Code)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Name)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Description)
                            </th>
                            <th>
                                Current Location
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.VendorId)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Status)
                            </th>

                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            var activeAssignment = item.MaterialAssignments?.FirstOrDefault(ma => ma.IsActive);
                            
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Id)
                                </td>
                                <td class="text-center">
                                    @{
                                        string imageUrl = "/uploads/defaultmaterialimage.svg";
                                        string imageAlt = "Default";
                                        string imageSource = "Default";
                                        
                                        if (item.Media.Any())
                                        {
                                            // Use material's own image if available
                                            imageUrl = $"/{item.Media.First().FilePath}";
                                            imageAlt = item.Name;
                                            imageSource = "Material";
                                        }
                                        else if (item.MaterialCategory?.Media != null && item.MaterialCategory.Media.Any())
                                        {
                                            // Use category image if material has no image
                                            imageUrl = $"/{item.MaterialCategory.Media.First().FilePath}";
                                            imageAlt = $"{item.MaterialCategory.Name} (Category)";
                                            imageSource = "Category";
                                        }
                                    }
                                    <img src="@imageUrl" alt="@imageAlt" class="rounded" 
                                         style="height: 50px; width: 50px; object-fit: contain;" 
                                         data-bs-toggle="tooltip" title="Image Source: @imageSource" />
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.MaterialCategory.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Code)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Description)
                                </td>
                                <td>
                                    @if (activeAssignment != null)
                                    {
                                        <span>@activeAssignment.Station</span>
                                        <small class="d-block text-muted">@activeAssignment.StationCategory</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not assigned</span>
                                    }
                                </td>
                                <td>
                                    @{
                                        var vendorName = "None";
                                        if (!string.IsNullOrEmpty(item.VendorId) && vendorNames.TryGetValue(item.VendorId, out string name))
                                        {
                                            vendorName = name;
                                        }
                                    }
                                    @vendorName
                                </td>
                                <td>
                                    <span class="ms-2 badge @BadgeHelper.GetMaterialStatusBadgeClass(item.Status)">
                                        @EnumHelper.GetEnumDescription(item.Status)
                                    </span>
                                </td>

                                <td>
                                    <a asp-action="Details" asp-route-id="@item.Id"><i class="mdi mdi-eye mdi-24px text-warning"></i></a>
                                    <a asp-action="Edit" asp-route-id="@item.Id"><i class="mdi mdi-lead-pencil mdi-24px text-primary"></i></a>
                                    <a asp-action="Delete" asp-route-id="@item.Id"><i class="mdi mdi-delete mdi-24px text-danger"></i></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <!-- Pagination -->
            @if (pagination != null)
            {
                @await Html.PartialAsync("_Pagination", pagination)
            }
        </div>
    </div>
</div>
</div>
