@model MRIV.ViewModels.MaterialDashboardViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = Model.DashboardTitle;
}

<style>
    /* Apply consistent widths to all filter controls */
    .filter-control {
        width: 200px; /* fixed width for selects & input-group */
        height: 2.5rem;
    }

        .filter-control .form-control,
        .filter-control.form-select {
            height: 2.5rem;
        }

    .filter-btn {
        height: 2.5rem;
        width: 45px; /* keeps reset button same height */
    }
</style>
<!-- Material Dashboard Header -->
<div class="row mb-3 pb-1">
    <div class="col-12">
        <div class="d-flex align-items-lg-center flex-lg-row flex-column">
            <div class="flex-grow-1">
                <h4 class="fs-16 mb-1">@Model.DashboardTitle</h4>
                <p class="text-muted mb-0">
                    @if (Model.AccessLevel == "Department")
                    {
                        <span>Material assets and inventory for your department</span>
                    }
                    else if (Model.AccessLevel == "Station")
                    {
                        <span>All material assets at @ViewBag.UserProfile?.BasicInfo.Station station</span>
                    }
                    else if (Model.AccessLevel == "Cross-Station")
                    {
                        <span>Material assets across all accessible stations</span>
                    }
                    else if (Model.AccessLevel == "Organization")
                    {
                        <span>Organization-wide material asset management</span>
                    }
                    else
                    {
                        <span>Material asset insights and utilization metrics</span>
                    }
                </p>
            </div>
            <div class="d-flex flex-wrap gap-2 align-items-center">
                <select class="form-select filter-control" id="categoryFilter">
                    <option value="">All Categories</option>
                </select>

                <select class="form-select filter-control" id="stationFilter">
                    <option value="">All Stations</option>
                </select>

                <select class="form-select filter-control" id="departmentFilter">
                    <option value="">All Departments</option>
                </select>

                <div class="input-group filter-control">
                    <input type="text" class="form-control" id="dateRangeFilter" readonly placeholder="Select date range">
                    <span class="input-group-text" style="background-color:#326408;color:#fff"><i class="ri-calendar-line"></i></span>
                    <input type="hidden" id="startDate">
                    <input type="hidden" id="endDate">
                </div>

                <button type="button" class="btn btn-secondary btn-sm filter-btn"
                        onclick="resetFilters()" title="Reset Filters">
                    <i class="ri-restart-line"></i>
                </button>
            </div>
        </div><!-- end card header -->
    </div>
</div>


<!-- Material KPI Cards -->
<div class="row">
    <!-- Total Materials KPI Card -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-muted mb-0">Total Materials</p>
                        <h2 class="mt-4 ff-secondary fw-semibold">
                            <span id="totalMaterialsValue" class="counter-value" data-target="0">Loading...</span>
                        </h2>
                        <p class="mb-0 text-muted">
                            <span class="badge bg-light text-primary mb-0">
                                <i class="ri-archive-line align-middle"></i> Asset Inventory
                            </span>
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-primary-subtle rounded-circle fs-2">
                                <i data-feather="package" class="text-primary material-shadow"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Total Value KPI Card -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-muted mb-0">Total Value</p>
                        <h2 class="mt-4 ff-secondary fw-semibold">
                            <span id="totalValueAmount" class="counter-value" data-target="0">KSh 0</span>
                        </h2>
                        <p class="mb-0 text-muted">
                            <span class="badge bg-light text-success mb-0">
                                <i class="ri-money-dollar-circle-line align-middle"></i> Asset Worth
                            </span>
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-success-subtle rounded-circle fs-2">
                                <i data-feather="dollar-sign" class="text-success material-shadow"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Available Materials KPI Card -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate" style="background-color: #326408;">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-white mb-0">Available Materials</p>
                        <h2 class="mt-4 ff-secondary fw-semibold">
                            <span id="availableMaterialsCount" class="counter-value text-white" data-target="0">0</span>
                        </h2>
                        <p class="mb-0 text-muted">
                            <span class="badge bg-warning-subtle text-warning mb-0">
                                <i class="ri-check-line align-middle"></i> Ready for Use
                            </span>
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-warning-subtle rounded-circle fs-2">
                                <i data-feather="check-circle" class="text-warning material-shadow"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Warranty Alerts KPI Card -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate" id="warrantyAlertsCard" style="background-color:#fcb900">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-white mb-0">Warranty Expired</p>
                        <h2 class="mt-4 ff-secondary fw-semibold">
                            <span id="warrantyAlertsCount" class="counter-value text-white" data-target="0">0</span>
                        </h2>
                        <p class="mb-0 text-muted">
                            <span class="badge bg-light text-danger mb-0" id="warrantyAlertBadge">
                                <i class="ri-shield-cross-line align-middle"></i> Expired
                            </span>
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-danger-subtle rounded-circle fs-2">
                                <i data-feather="shield-off" class="text-danger material-shadow"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Material Analytics Charts -->
<div class="row mt-4 d-flex align-items-stretch">
    <!-- Materials by Category Chart -->
    <div class="col-xl-6 d-flex">
        <div class="card flex-fill">
            <div class="card-header">
                <h4 class="card-title mb-0">Materials by Category</h4>
            </div>
            <div class="card-body">
                <div id="materialsByCategoryChart" style="height: 350px;"></div>
                <div class="text-center" id="categoryChartLoading">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted mt-2">Loading category data...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Breakdown Chart -->
    <div class="col-xl-6 d-flex">
        <div class="card flex-fill">
            <div class="card-header">
                <h4 class="card-title mb-0">Status Breakdown</h4>
            </div>
            <div class="card-body">
                <div id="statusBreakdownChart" style="height: 350px;"></div>
                <div class="text-center" id="statusChartLoading">
                    <div class="spinner-border text-success" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted mt-2">Loading status data...</p>
                </div>
                <!-- Status Summary - Inline Legend -->
                <div id="statusSummaryTable" class="mt-3" style="display: none;">
                    <div class="row" id="statusSummaryBody">
                        <!-- Status values will be populated here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Row 3: Material Insights Tabs & Recent Activity -->
<div class="row">
    <!-- Material Insights Card (3/4 width) -->
    <div class="col-xl-9 d-flex">
        <div class="card flex-fill">
            <div class="card-header">
                <h4 class="card-title mb-0">Material Insights</h4>
            </div>
            <div class="card-body">
                <!-- Material Insights Tabs -->
                <ul class="nav nav-tabs-custom " id="materialInsightsTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <a class="nav-link active" id="available-tab" data-bs-toggle="tab" href="#available-materials" role="tab">
                            <i class="ri-checkbox-circle-line me-1"></i>
                            Available
                            <span class="badge bg-light text-success ms-1" id="availableTabBadge">0</span>
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" id="inprocess-tab" data-bs-toggle="tab" href="#inprocess-materials" role="tab">
                            <i class="ri-loader-3-line me-1"></i>
                            In Process
                            <span class="badge bg-light text-danger ms-1" id="inprocessTabBadge">0</span>
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" id="warranty-tab" data-bs-toggle="tab" href="#warranty-expired" role="tab">
                            <i class="ri-shield-cross-line me-1"></i>
                            Expired Warranty
                            <span class="badge bg-light text-warning ms-1" id="warrantyTabBadge">0</span>
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" id="lost-tab" data-bs-toggle="tab" href="#lost-materials" role="tab">
                            <i class="ri-error-warning-line me-1"></i>
                            Lost Items
                            <span class="badge bg-light text-dark ms-1" id="lostTabBadge">0</span>
                        </a>
                    </li>
                   
                </ul>

                <!-- Tab Content -->
                <div class="tab-content pt-3" id="materialInsightsTabContent">
                    <!-- Available Materials Tab -->
                    <div class="tab-pane active" id="available-materials" role="tabpanel">
                        <div class="table-responsive table-card">
                            <table class="table table-nowrap align-middle table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th scope="col">Material ID</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Category</th>
                                        <th scope="col">Location</th>
                                        <th scope="col">Days Available</th>
                                        <th scope="col" style="width: 150px;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="availableMaterialsTable">
                                    <tr>
                                        <td colspan="6" class="text-center py-5">
                                            <div class="d-flex justify-content-center align-items-center">
                                                <div class="spinner-border text-primary me-3" role="status" style="width: 2rem; height: 2rem;">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">Loading Available Materials</h6>
                                                    <p class="text-muted mb-0">Please wait while we fetch the data...</p>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- In Process Materials Tab -->
                    <div class="tab-pane" id="inprocess-materials" role="tabpanel">
                        <div class="table-responsive table-card">
                            <table class="table table-nowrap align-middle table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th scope="col">Material ID</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Category</th>
                                        <th scope="col">Current Process</th>
                                        <th scope="col">Days in Process</th>
                                        <th scope="col" style="width: 150px;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="inprocessMaterialsTable">
                                    <tr>
                                        <td colspan="6" class="text-center py-5">
                                            <div class="d-flex justify-content-center align-items-center">
                                                <div class="spinner-border text-danger me-3" role="status" style="width: 2rem; height: 2rem;">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">Loading In-Process Materials</h6>
                                                    <p class="text-muted mb-0">Please wait while we fetch the data...</p>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Expired Warranty Tab -->
                    <div class="tab-pane" id="warranty-expired" role="tabpanel">
                        <div class="table-responsive table-card">
                            <table class="table table-nowrap align-middle table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th scope="col">Material ID</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Category</th>
                                        <th scope="col">Warranty End Date</th>
                                        <th scope="col">Days Expired</th>
                                        <th scope="col" style="width: 150px;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="warrantyExpiredTable">
                                    <tr>
                                        <td colspan="6" class="text-center py-5">
                                            <div class="d-flex justify-content-center align-items-center">
                                                <div class="spinner-border text-warning me-3" role="status" style="width: 2rem; height: 2rem;">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">Loading Expired Warranty Materials</h6>
                                                    <p class="text-muted mb-0">Please wait while we fetch the data...</p>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Lost Materials Tab -->
                    <div class="tab-pane" id="lost-materials" role="tabpanel">
                        <div class="table-responsive table-card">
                            <table class="table table-nowrap align-middle table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th scope="col">Material ID</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Category</th>
                                        <th scope="col">Last Known Location</th>
                                        <th scope="col">Lost Since</th>
                                        <th scope="col" style="width: 150px;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="lostMaterialsTable">
                                    <tr>
                                        <td colspan="6" class="text-center py-5">
                                            <div class="d-flex justify-content-center align-items-center">
                                                <div class="spinner-border text-dark me-3" role="status" style="width: 2rem; height: 2rem;">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">Loading Lost Materials</h6>
                                                    <p class="text-muted mb-0">Please wait while we fetch the data...</p>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

              
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Activity Card (1/4 width) -->
    <div class="col-xl-3 d-flex">
        <div class="card flex-fill">
            <div class="card-header">
                <h4 class="card-title mb-0">Recent Activity</h4>
            </div>
            <div class="card-body">
                <div class="vstack gap-3" id="recentActivityList">
                    <div class="text-center py-5">
                        <div class="d-flex justify-content-center align-items-center">
                            <div class="spinner-border text-success me-3" role="status" style="width: 1.5rem; height: 1.5rem;">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div>
                                <h6 class="mb-1">Loading Activities</h6>
                                <p class="text-muted mb-0 small">Fetching recent material activities...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Debug Info -->

@section Scripts {

<!-- Material Dashboard Filter JavaScript -->
<script>
    let filterData = {};

    // Load filter data on page load
    $(document).ready(function() {
        loadFilterData();
        initializeDateDefaults();
        initializeDateRangePicker();
        loadMaterialKPIs(); // Load initial KPI data
        loadMaterialCharts(); // Load initial chart data
    });

    async function loadFilterData() {
        try {
            console.log('Loading filter data...');

            // Check if elements exist
            console.log('Checking if filter elements exist:');
            console.log('Category filter:', document.getElementById('categoryFilter'));
            console.log('Station filter:', document.getElementById('stationFilter'));
            console.log('Department filter:', document.getElementById('departmentFilter'));

            const response = await fetch('/Dashboard/GetFilterData');
            const result = await response.json();

            if (result.error) {
                console.error('Error from server:', result.error);
                showNotification('Error loading filter data: ' + result.error, 'error');
                return;
            }

            filterData = result;
            console.log('Filter data loaded:', filterData);

            // Populate dropdowns
            populateCategories();
            populateStations();
            populateDepartments();

            console.log('All dropdowns populated');

        } catch (error) {
            console.error('Error loading filter data:', error);
            showNotification('Error loading filter data. Please refresh the page.', 'error');
        }
    }

    function populateCategories() {
        const categorySelect = document.getElementById('categoryFilter');
        if (!categorySelect) {
            console.error('Category filter element not found');
            return;
        }

        categorySelect.innerHTML = '<option value="">All Categories</option>';

        if (filterData.categories && filterData.categories.length > 0) {
            filterData.categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.code;
                option.textContent = category.name;
                categorySelect.appendChild(option);
            });
            console.log(`Populated ${filterData.categories.length} categories`);
        } else {
            console.log('No categories data available');
        }
    }

    function populateStations(categoryFilter = '') {
        const stationSelect = document.getElementById('stationFilter');
        if (!stationSelect) {
            console.error('Station filter element not found');
            return;
        }

        stationSelect.innerHTML = '<option value="">All Stations</option>';

        if (filterData.stations && filterData.stations.length > 0) {
            let filteredStations = filterData.stations;
            if (categoryFilter) {
                filteredStations = filterData.stations.filter(s => s.categoryCode === categoryFilter);
            }

            filteredStations.forEach(station => {
                const option = document.createElement('option');
                option.value = station.id;
                option.textContent = station.name;
                stationSelect.appendChild(option);
            });
            console.log(`Populated ${filteredStations.length} stations${categoryFilter ? ' for category ' + categoryFilter : ''}`);
        } else {
            console.log('No stations data available');
        }
    }

    function populateDepartments() {
        const departmentSelect = document.getElementById('departmentFilter');
        if (!departmentSelect) {
            console.error('Department filter element not found');
            return;
        }

        departmentSelect.innerHTML = '<option value="">All Departments</option>';

        if (filterData.departments && filterData.departments.length > 0) {
            filterData.departments.forEach(department => {
                const option = document.createElement('option');
                option.value = department.id;
                option.textContent = department.name;
                departmentSelect.appendChild(option);
            });
            console.log(`Populated ${filterData.departments.length} departments`);
        } else {
            console.log('No departments data available');
        }
    }

    // Set up filter change listeners (cascading and auto-apply)
    document.addEventListener('DOMContentLoaded', function() {
        // Category change triggers station filter update (cascading)
        document.getElementById('categoryFilter').addEventListener('change', function() {
            const selectedCategory = this.value;
            console.log('Category changed to:', selectedCategory);

            populateStations(selectedCategory);

            // Reset station selection when category changes
            document.getElementById('stationFilter').value = '';

            // Auto-apply filters on change
            applyFilters();
        });

        // Station filter change
        document.getElementById('stationFilter').addEventListener('change', function() {
            console.log('Station changed to:', this.value);
            applyFilters();
        });

        // Department filter change
        document.getElementById('departmentFilter').addEventListener('change', function() {
            console.log('Department changed to:', this.value);
            applyFilters();
        });

        // Date filter changes with validation
        document.getElementById('startDate').addEventListener('change', function() {
            console.log('Start date changed to:', this.value);
            validateAndApplyDateFilters();
        });

        document.getElementById('endDate').addEventListener('change', function() {
            console.log('End date changed to:', this.value);
            validateAndApplyDateFilters();
        });
    });

    function validateAndApplyDateFilters() {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        // Only validate if both dates are set
        if (startDate && endDate && startDate > endDate) {
            showNotification('Start date cannot be after end date', 'error');
            return;
        }

        applyFilters();
    }

    function initializeDateDefaults() {
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - 30); // Last 30 days

        const startDateStr = startDate.toISOString().split('T')[0];
        const endDateStr = endDate.toISOString().split('T')[0];

        document.getElementById('startDate').value = startDateStr;
        document.getElementById('endDate').value = endDateStr;

        // Update the display input
        updateDateRangeDisplay(startDateStr, endDateStr);

        console.log('Date defaults set: Last 30 days');
    }

    function updateDateRangeDisplay(startDate, endDate) {
        const dateRangeFilter = document.getElementById('dateRangeFilter');
        if (startDate && endDate) {
            const start = new Date(startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            const end = new Date(endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            dateRangeFilter.value = `${start} - ${end}`;
        } else {
            dateRangeFilter.value = '';
        }
    }

    function initializeDateRangePicker() {
        const dateRangeFilter = document.getElementById('dateRangeFilter');

        dateRangeFilter.addEventListener('click', function() {
            showDateRangeModal();
        });
    }

    function showDateRangeModal() {
        // Create a simple modal for date range selection
        const modalHtml = `
            <div class="modal fade" id="dateRangeModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Select Date Range</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="modalStartDate" value="${document.getElementById('startDate').value}">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">End Date</label>
                                <input type="date" class="form-control" id="modalEndDate" value="${document.getElementById('endDate').value}">
                            </div>
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="setQuickDateRange(7)">Last 7 days</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="setQuickDateRange(30)">Last 30 days</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="setQuickDateRange(90)">Last 90 days</button>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="applyDateRange()">Apply</button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Remove existing modal if any
        const existingModal = document.getElementById('dateRangeModal');
        if (existingModal) {
            existingModal.remove();
        }

        // Add modal to body
        document.body.insertAdjacentHTML('beforeend', modalHtml);

        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('dateRangeModal'));
        modal.show();
    }

    function setQuickDateRange(days) {
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - days);

        document.getElementById('modalStartDate').value = startDate.toISOString().split('T')[0];
        document.getElementById('modalEndDate').value = endDate.toISOString().split('T')[0];
    }

    function applyDateRange() {
        const startDate = document.getElementById('modalStartDate').value;
        const endDate = document.getElementById('modalEndDate').value;

        // Validate date range
        if (startDate && endDate && startDate > endDate) {
            alert('Start date cannot be after end date');
            return;
        }

        // Update hidden inputs
        document.getElementById('startDate').value = startDate;
        document.getElementById('endDate').value = endDate;

        // Update display
        updateDateRangeDisplay(startDate, endDate);

        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('dateRangeModal'));
        modal.hide();

        // Apply filters
        applyFilters();
    }

    function applyFilters() {
        // Skip if we're in the middle of resetting filters
        if (window.filtersResetting) {
            return;
        }

        const filters = {
            category: document.getElementById('categoryFilter').value,
            station: document.getElementById('stationFilter').value,
            department: document.getElementById('departmentFilter').value,
            startDate: document.getElementById('startDate').value,
            endDate: document.getElementById('endDate').value
        };

        // Store filters for dashboard refresh
        sessionStorage.setItem('materialDashboardFilters', JSON.stringify(filters));

        console.log('Filters applied:', filters);

        // Refresh KPI data with new filters
        loadMaterialKPIs();
        loadMaterialCharts();
    }

    function resetFilters() {
        console.log('Resetting filters...');

        // Temporarily disable auto-apply to avoid multiple calls
        window.filtersResetting = true;

        document.getElementById('categoryFilter').value = '';
        document.getElementById('stationFilter').value = '';
        document.getElementById('departmentFilter').value = '';

        // Reset stations to show all (no category filter)
        populateStations();

        // Reset to default date range (last 30 days)
        initializeDateDefaults();

        // Clear stored filters
        sessionStorage.removeItem('materialDashboardFilters');

        // Re-enable auto-apply and apply the reset filters
        setTimeout(() => {
            window.filtersResetting = false;
            applyFilters();
            console.log('Filters reset to defaults');
        }, 100);
    }

    function refreshDashboard() {
        console.log('Refreshing dashboard...');

        // Reload filter data
        loadFilterData();

        // Re-apply current filters
        applyFilters();

        console.log('Dashboard refreshed');
    }

    async function loadMaterialKPIs() {
        try {
            console.log('Loading Material KPIs...');

            // Show loading state
            setKPILoadingState(true);

            // Get current filters
            const filters = JSON.parse(sessionStorage.getItem('materialDashboardFilters') || '{}');

            const response = await fetch('/Dashboard/GetMaterialKPIs', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(filters)
            });

            const result = await response.json();

            if (result.success) {
                updateTotalMaterialsKPI(result.totalMaterials, result.trend);
                updateTotalValueKPI(result.totalValue, result.trend);
                updateAvailableMaterialsKPI(result.availableMaterials, result.trend);
                updateWarrantyAlertsKPI(result.warrantyExpired, result.totalMaterials);

                // Log debug information
                if (result.debug) {
                    console.log('KPI Debug Info:', result.debug);
                }

                console.log('Material KPIs loaded successfully');
            } else {
                console.error('Error from server:', result.error);
                showKPIError('Error loading KPIs: ' + result.error);
            }

        } catch (error) {
            console.error('Error loading Material KPIs:', error);
            showKPIError('Failed to load KPI data. Please try refreshing the page.');
        } finally {
            // Hide loading state
            setKPILoadingState(false);
        }
    }

    function updateTotalMaterialsKPI(totalMaterials, trend) {
        // Update the value with animation
        const valueElement = document.getElementById('totalMaterialsValue');
        const trendElement = document.getElementById('totalMaterialsTrend');

        if (valueElement) {
            // Simple counter animation (can be enhanced later)
            valueElement.textContent = totalMaterials.toLocaleString();
        }

        if (trendElement && trend !== undefined) {
            // Update trend display
            const trendText = trend > 0 ? `+${trend.toFixed(1)}%` : trend < 0 ? `${trend.toFixed(1)}%` : '0%';
            const trendIcon = trend > 0 ? 'ri-arrow-right-up-line' : trend < 0 ? 'ri-arrow-right-down-line' : 'ri-arrow-right-line';
            const trendColor = trend > 0 ? 'text-success' : trend < 0 ? 'text-danger' : 'text-muted';

            trendElement.innerHTML = `<i class="${trendIcon} fs-13 align-middle"></i> ${trendText}`;
            trendElement.className = `fs-14 mb-0 ${trendColor}`;
        }
    }

    function updateTotalValueKPI(totalValue, trend) {
        // Update the value with currency formatting
        const valueElement = document.getElementById('totalValueAmount');

        if (valueElement) {
            // Format as KSh currency with proper number formatting
            const formattedValue = new Intl.NumberFormat('en-KE', {
                style: 'currency',
                currency: 'KES',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(totalValue || 0);

            valueElement.textContent = formattedValue;

            // Update the data-target attribute for potential counter animations
            valueElement.setAttribute('data-target', totalValue || 0);
        }

        // Note: trend handling for Total Value can be added later when trend calculation is implemented
        console.log('Total Value updated:', totalValue);
    }

    function updateAvailableMaterialsKPI(availableMaterials, trend) {
        // Update the value with number formatting
        const valueElement = document.getElementById('availableMaterialsCount');

        if (valueElement) {
            // Format with number formatting for readability
            valueElement.textContent = (availableMaterials || 0).toLocaleString();

            // Update the data-target attribute for potential counter animations
            valueElement.setAttribute('data-target', availableMaterials || 0);
        }

        // Note: trend handling for Available Materials can be added later when trend calculation is implemented
        console.log('Available Materials updated:', availableMaterials);
    }

    function updateWarrantyAlertsKPI(warrantyExpired, totalMaterials) {
        // Update the value with number formatting
        const valueElement = document.getElementById('warrantyAlertsCount');
        const badgeElement = document.getElementById('warrantyAlertBadge');
        const cardElement = document.getElementById('warrantyAlertsCard');

        if (valueElement) {
            // Format with number formatting for readability
            valueElement.textContent = (warrantyExpired || 0).toLocaleString();

            // Update the data-target attribute for potential counter animations
            valueElement.setAttribute('data-target', warrantyExpired || 0);
        }

        // Update badge and card styling based on warranty status
        if (badgeElement && cardElement) {
            const expiredCount = warrantyExpired || 0;

            if (expiredCount === 0) {
                // No expired warranties - show success state
                badgeElement.className = 'badge bg-light text-success mb-0';
                badgeElement.innerHTML = '<i class="ri-shield-check-line align-middle"></i> All Current';
                cardElement.className = 'card card-animate';
            } else {
                // Expired warranties found - show warning state
                badgeElement.className = 'badge bg-light text-danger mb-0';
                badgeElement.innerHTML = '<i class="ri-shield-cross-line align-middle"></i> Expired';
                cardElement.className = 'card card-animate border-danger';

                // Calculate percentage for additional context
                const percentage = totalMaterials > 0 ? ((expiredCount / totalMaterials) * 100).toFixed(1) : 0;
                console.log(`Warranty Alert: ${expiredCount} of ${totalMaterials} materials (${percentage}%) have expired warranties`);
            }
        }

        console.log('Warranty Alerts updated:', warrantyExpired);
    }

    function setKPILoadingState(isLoading) {
        const totalMaterialsValue = document.getElementById('totalMaterialsValue');
        const totalMaterialsTrend = document.getElementById('totalMaterialsTrend');
        const totalValueAmount = document.getElementById('totalValueAmount');
        const availableMaterialsCount = document.getElementById('availableMaterialsCount');
        const warrantyAlertsCount = document.getElementById('warrantyAlertsCount');

        if (isLoading) {
            if (totalMaterialsValue) totalMaterialsValue.textContent = 'Loading...';
            if (totalMaterialsTrend) totalMaterialsTrend.innerHTML = '<i class="ri-loader-4-line fs-13 align-middle"></i> ...';
            if (totalValueAmount) totalValueAmount.textContent = 'Loading...';
            if (availableMaterialsCount) availableMaterialsCount.textContent = 'Loading...';
            if (warrantyAlertsCount) warrantyAlertsCount.textContent = 'Loading...';
        }
    }

    function showKPIError(message) {
        const totalMaterialsValue = document.getElementById('totalMaterialsValue');
        const totalMaterialsTrend = document.getElementById('totalMaterialsTrend');
        const totalValueAmount = document.getElementById('totalValueAmount');
        const availableMaterialsCount = document.getElementById('availableMaterialsCount');
        const warrantyAlertsCount = document.getElementById('warrantyAlertsCount');

        if (totalMaterialsValue) totalMaterialsValue.textContent = 'Error';
        if (totalMaterialsTrend) totalMaterialsTrend.innerHTML = '<i class="ri-error-warning-line fs-13 align-middle"></i> Error';
        if (totalValueAmount) totalValueAmount.textContent = 'Error';
        if (availableMaterialsCount) availableMaterialsCount.textContent = 'Error';
        if (warrantyAlertsCount) warrantyAlertsCount.textContent = 'Error';

        // Could also show a toast notification here
        console.error('KPI Error:', message);
    }

    function showNotification(message, type = 'info') {
        // Simple notification - you can enhance this with your notification system
        console.log(`[${type.toUpperCase()}] ${message}`);

        // Optional: Show a simple alert for now (can be replaced with toast notifications)
        if (type === 'error') {
            console.error(message);
        }
    }

    // Load any saved filters from session storage on page load
    $(document).ready(function() {
        setTimeout(function() {
            const savedFilters = sessionStorage.getItem('materialDashboardFilters');
            if (savedFilters) {
                try {
                    const filters = JSON.parse(savedFilters);
                    console.log('Loading saved filters:', filters);

                    // Temporarily disable auto-apply during restoration
                    window.filtersResetting = true;

                    // Apply saved filter values
                    if (filters.category) document.getElementById('categoryFilter').value = filters.category;
                    if (filters.station) document.getElementById('stationFilter').value = filters.station;
                    if (filters.department) document.getElementById('departmentFilter').value = filters.department;
                    if (filters.startDate) document.getElementById('startDate').value = filters.startDate;
                    if (filters.endDate) document.getElementById('endDate').value = filters.endDate;

                    // Update stations based on saved category
                    if (filters.category) {
                        populateStations(filters.category);
                        // Re-apply station selection after repopulating
                        setTimeout(() => {
                            if (filters.station) document.getElementById('stationFilter').value = filters.station;
                        }, 100);
                    }

                    // Re-enable auto-apply after restoration
                    setTimeout(() => {
                        window.filtersResetting = false;
                        console.log('Saved filters restored successfully');
                    }, 200);

                } catch (error) {
                    console.error('Error loading saved filters:', error);
                    window.filtersResetting = false;
                }
            }
        }, 500); // Wait for filter data to load first
    });

    // Chart Variables
    let categoryChart = null;
    let statusChart = null;

    // Get current filter values for API calls
    function getActiveFilters() {
        return {
            category: document.getElementById('categoryFilter')?.value || '',
            station: document.getElementById('stationFilter')?.value || '',
            department: document.getElementById('departmentFilter')?.value || '',
            startDate: document.getElementById('startDate')?.value || '',
            endDate: document.getElementById('endDate')?.value || ''
        };
    }

    // Load Material Charts
    async function loadMaterialCharts() {
        try {
            console.log('Loading material charts...');

            // Show loading states
            document.getElementById('categoryChartLoading').style.display = 'block';
            document.getElementById('statusChartLoading').style.display = 'block';

            const filters = getActiveFilters();

            const response = await fetch('/Dashboard/GetMaterialChartData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify(filters)
            });

            const result = await response.json();

            if (result.success) {
                // Load category chart
                loadCategoryChart(result.categoryBreakdown);

                // Load status chart
                loadStatusChart(result.statusBreakdown);

                // Log debug information
                if (result.debug) {
                    console.log('Chart Debug Info:', result.debug);
                }

                console.log('Material charts loaded successfully');
            } else {
                console.error('Error from server:', result.error);
                showChartError('Error loading charts: ' + result.error);
            }

        } catch (error) {
            console.error('Error loading Material Charts:', error);
            showChartError('Failed to load chart data. Please try refreshing the page.');
        } finally {
            // Hide loading states
            document.getElementById('categoryChartLoading').style.display = 'none';
            document.getElementById('statusChartLoading').style.display = 'none';
        }
    }

    function loadCategoryChart(categoryData) {
        // Destroy existing chart if it exists
        if (categoryChart) {
            categoryChart.destroy();
        }

        // Prepare data for ApexCharts bar chart
        const categories = categoryData.map(item => item.categoryName);
        const series = categoryData.map(item => item.count);

        const options = {
            series: [{
                name: 'Materials',
                data: series
            }],
            chart: {
                type: 'bar',
                height: 350,
                toolbar: {
                    show: false
                }
            },
            plotOptions: {
                bar: {
                    horizontal: false,
                    columnWidth: '60%',
                    borderRadius: 4
                }
            },
            dataLabels: {
                enabled: true,
                style: {
                    fontSize: '12px',
                    fontWeight: 'bold'
                }
            },
            colors: ['#3b82f6'],
            xaxis: {
                categories: categories,
                labels: {
                    style: {
                        fontSize: '12px'
                    }
                }
            },
            yaxis: {
                title: {
                    text: 'Number of Materials'
                }
            },
            grid: {
                borderColor: '#f1f1f1'
            },
            tooltip: {
                y: {
                    formatter: function(val, opts) {
                        const total = series.reduce((a, b) => a + b, 0);
                        const percentage = ((val / total) * 100).toFixed(1);
                        return `${val} materials (${percentage}%)`;
                    }
                }
            }
        };

        categoryChart = new ApexCharts(document.querySelector("#materialsByCategoryChart"), options);
        categoryChart.render();

        console.log('Category bar chart loaded with', categoryData.length, 'categories');
    }

    function loadStatusChart(statusData) {
        // Destroy existing chart if it exists
        if (statusChart) {
            statusChart.destroy();
        }

        // Get status info using project's BadgeHelper color scheme
        const statusInfo = getMaterialStatusInfo();

        // Prepare data for ApexCharts donut chart
        const series = statusData.map(item => item.count);
        const labels = statusData.map(item => statusInfo[item.status]?.name || 'Unknown');
        const colors = statusData.map(item => statusInfo[item.status]?.color || '#cccccc');

        const options = {
            series: series,
            chart: {
                type: 'donut',
                height: 320
            },
            labels: labels,
            colors: colors,
            plotOptions: {
                pie: {
                    donut: {
                        size: '60%',
                        labels: {
                            show: true,
                            total: {
                                show: true,
                                label: 'Total',
                                formatter: function (w) {
                                    return w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                                }
                            }
                        }
                    }
                }
            },
            dataLabels: {
                enabled: true,
                formatter: function(val, opts) {
                    return Math.round(val) + '%';
                }
            },
            legend: {
                show: false // We'll use custom table below
            },
            tooltip: {
                y: {
                    formatter: function(val) {
                        const total = series.reduce((a, b) => a + b, 0);
                        const percentage = ((val / total) * 100).toFixed(1);
                        return `${val} materials (${percentage}%)`;
                    }
                }
            }
        };

        statusChart = new ApexCharts(document.querySelector("#statusBreakdownChart"), options);
        statusChart.render();

        // Create status summary table below the chart
        createStatusSummaryTable(statusData, statusInfo);

        console.log('Status donut chart loaded with', statusData.length, 'status types');
    }

    // Get Material Status info using project's badge color scheme for consistency
    function getMaterialStatusInfo() {
        // Based on BadgeHelper.GetMaterialStatusBadgeClass and project CSS colors
        return {
            1: { // UnderMaintenance -> badge-information
                name: 'Under Maintenance',
                color: '#3302a5c4', // badge-information color
                badgeClass: 'badge-information'
            },
            2: { // LostOrStolen -> badge-dark
                name: 'Lost/Stolen',
                color: '#1E283D', // badge-dark color
                badgeClass: 'badge-dark'
            },
            3: { // Disposed -> badge-secondary
                name: 'Disposed',
                color: '#F1F1F1', // badge-secondary color
                badgeClass: 'badge-secondary'
            },
            4: { // Available -> badge-active
                name: 'Available',
                color: '#038d21', // badge-active color
                badgeClass: 'badge-active'
            },
            5: { // Assigned -> badge-warning
                name: 'Assigned',
                color: '#ffaf00', // badge-warning color
                badgeClass: 'badge-warning'
            },
            6: { // InProcess -> badge-danger
                name: 'In Process',
                color: '#F95F53', // badge-danger color
                badgeClass: 'badge-danger'
            }
        };
    }

    function createStatusSummaryTable(statusData, statusInfo) {
        const summaryBody = document.getElementById('statusSummaryBody');
        const summaryContainer = document.getElementById('statusSummaryTable');

        if (!summaryBody || !summaryContainer) return;

        // Clear existing content
        summaryBody.innerHTML = '';

        // Calculate total for percentages
        const total = statusData.reduce((sum, item) => sum + item.count, 0);

        // Create horizontal legend items
        statusData.forEach(item => {
            const info = statusInfo[item.status] || { name: 'Unknown', color: '#cccccc', badgeClass: 'badge-light' };
            const percentage = total > 0 ? ((item.count / total) * 100).toFixed(1) : 0;

            const col = document.createElement('div');
            col.className = 'col-md-6 col-lg-4 mb-2';
            col.innerHTML = `
                <div class="d-flex align-items-center">
                    <span class="d-inline-block rounded-circle me-2" style="width: 10px; height: 10px; background-color: ${info.color};"></span>
                    <span class="text-muted small me-2">${info.name}:</span>
                    <span class="fw-semibold small">${item.count.toLocaleString()}</span>
                    <span class="text-muted small ms-1">(${percentage}%)</span>
                </div>
            `;
            summaryBody.appendChild(col);
        });

        // Show the summary
        summaryContainer.style.display = 'block';
    }


    function showChartError(message) {
        // Hide loading indicators and show error
        document.getElementById('categoryChartLoading').style.display = 'none';
        document.getElementById('statusChartLoading').style.display = 'none';

        // Could enhance this to show actual error messages in the chart areas
        console.error('Chart Error:', message);
    }

</script>

<!-- ApexCharts -->
<script src="~/vendors/apexcharts/apexcharts.min.js"></script>
}