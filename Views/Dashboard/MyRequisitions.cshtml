@using MRIV.Enums
@model MRIV.ViewModels.MyRequisitionsDashboardViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    ViewData["Title"] = "My Requisitions Dashboard";
}

<!-- User Welcome Section -->

<div class="row mb-3 pb-1">
    <div class="col-12">
        <div class="d-flex align-items-lg-center flex-lg-row flex-column">
            <div class="flex-grow-1">
                <h4 class="fs-16 mb-1">Welcome back, @Model.UserInfo.Name</h4>
                <p class="text-muted mb-0">Here's what's happening with the MRIV system today.</p>
            </div>
            <div class="mt-3 mt-lg-1">
               
            </div>
        </div><!-- end card header -->
    </div>
    <!--end col-->
</div>

<!-- Action Required Alerts -->
@if (Model.HasActionItems)
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-@Model.ActionRequired.AlertLevel alert-dismissible alert-additional fade show" role="alert">
                <div class="alert-body">
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    <div class="d-flex">
                        <div class="flex-shrink-0 me-3">
                            @if (Model.ActionRequired.AlertLevel == "danger")
                            {
                                <i class="ri-error-warning-line fs-16 align-middle"></i>
                            }
                            else if (Model.ActionRequired.AlertLevel == "warning")
                            {
                                <i class="ri-alert-line fs-16 align-middle"></i>
                            }
                            else
                            {
                                <i class="ri-information-line fs-16 align-middle"></i>
                            }
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="alert-heading">Action Required</h5>
                            <p class="mb-0">@Model.ActionRequired.PriorityMessage</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



<!-- Primary Metrics Row -->
<div class="row">
    <!-- Total Requisitions Widget -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-muted mb-0">Total Requisitions</p>
                        <h2 class="mt-4 ff-secondary fw-semibold">
                            <span class="counter-value" data-target="@Model.TotalRequisitions">@Model.TotalRequisitions</span>
                        </h2>
                        <p class="mb-0 text-muted">
                            @{
                                var totalTrendClass = Model.TotalRequisitionsTrend >= 0 ? "text-success" : "text-danger";
                                var totalTrendIcon = Model.TotalRequisitionsTrend >= 0 ? "ri-arrow-up-line" : "ri-arrow-down-line";
                            }
                            <span class="badge bg-light @totalTrendClass mb-0">
                                <i class="@totalTrendIcon align-middle"></i> @Model.TotalRequisitionsTrend.ToString("F1") %
                            </span> vs. previous month
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-info-subtle rounded-circle fs-2">
                                <i data-feather="clipboard" class="text-info material-shadow"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Awaiting My Action Widget -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate @(Model.AwaitingMyAction > 0 ? "border-warning" : "")">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-muted mb-0">Awaiting My Action</p>
                        <h2 class="mt-4 ff-secondary fw-semibold">
                            <span class="counter-value" data-target="@Model.AwaitingMyAction">@Model.AwaitingMyAction</span>
                        </h2>
                        <p class="mb-0 text-muted">
                            @if (Model.AwaitingMyAction > 0)
                            {
                                <span class="badge bg-warning text-dark mb-0">
                                    <i class="ri-time-line align-middle"></i> Needs Attention
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-success text-white mb-0">
                                    <i class="ri-check-line align-middle"></i> All Caught Up
                                </span>
                            }
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-warning-subtle rounded-circle fs-2 material-shadow">
                                <i data-feather="bell" class="text-warning"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- This Month Requisitions Widget -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate bg-primary">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-muted mb-0" style="color:#fff !important">This Month</p>
                        <h2 class="mt-4 ff-secondary fw-semibold" style="color:#fff !important">
                            <span class="counter-value" data-target="@Model.ThisMonthRequisitions">@Model.ThisMonthRequisitions</span>
                        </h2>
                        <p class="mb-0 text-muted" style="color:#fff !important">
                            @{
                                var monthlyTrendClass = Model.ThisMonthTrend >= 0 ? "text-success" : "text-danger";
                                var monthlyTrendIcon = Model.ThisMonthTrend >= 0 ? "ri-arrow-up-line" : "ri-arrow-down-line";
                            }
                            <span class="badge bg-light @monthlyTrendClass mb-0">
                                <i class="@monthlyTrendIcon align-middle"></i> @Model.ThisMonthTrend.ToString("F1") %
                            </span> vs. last month
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-white-subtle rounded-circle fs-2 material-shadow">
                                <i data-feather="calendar" class="text-white"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Widget -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate border-@Model.PerformanceColor">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-muted mb-0">Completion Rate</p>
                        <h2 class="mt-4 ff-secondary fw-semibold">
                            <span class="counter-value" data-target="@((int)Model.CompletionRate)">@Model.CompletionRate.ToString("F1")</span>%
                        </h2>
                        <p class="mb-0 text-muted">
                            <span class="badge bg-@Model.PerformanceColor text-white mb-0">
                                <i class="ri-trophy-line align-middle"></i> @Model.PerformanceStatus
                            </span>
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-@(Model.PerformanceColor)-subtle rounded-circle fs-2 material-shadow">
                                <i data-feather="trending-up" class="text-@Model.PerformanceColor"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Quick Stats CRM Widget -->
<div class="row">
    <div class="col-xl-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title mb-0">Quick Insights</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-xl-2 col-md-4 col-6">
                        <div class="p-3 border border-dashed border-start-0 border-top-0 border-end-0">
                            <h5 class="mb-1"><span class="counter-value" data-target="@Model.QuickStats.CompletedThisMonth">@Model.QuickStats.CompletedThisMonth</span></h5>
                            <p class="text-muted mb-0">Completed This Month</p>
                        </div>
                    </div>
                    <div class="col-xl-2 col-md-4 col-6">
                        <div class="p-3 border border-dashed border-start-0 border-top-0 border-end-0">
                            <h5 class="mb-1">@Model.QuickStats.FormattedAverageItems</h5>
                            <p class="text-muted mb-0">Avg Items/Request</p>
                        </div>
                    </div>
                    <div class="col-xl-2 col-md-4 col-6">
                        <div class="p-3 border border-dashed border-start-0 border-top-0 border-end-0">
                            <h5 class="mb-1">@Model.FormattedAverageProcessingDays</h5>
                            <p class="text-muted mb-0">Avg Processing Time</p>
                        </div>
                    </div>
                    <div class="col-xl-2 col-md-4 col-6">
                        <div class="p-3 border border-dashed border-start-0 border-top-0 border-end-0">
                            <h5 class="mb-1"><span class="counter-value" data-target="@Model.QuickStats.TotalItemsRequested">@Model.QuickStats.TotalItemsRequested</span></h5>
                            <p class="text-muted mb-0">Total Items Requested</p>
                        </div>
                    </div>
                    <div class="col-xl-2 col-md-4 col-6">
                        <div class="p-3 border border-dashed border-start-0 border-top-0 border-end-0">
                            <h5 class="mb-1">@(string.IsNullOrEmpty(Model.QuickStats.MostRequestedCategory) ? "N/A" : Model.QuickStats.MostRequestedCategory)</h5>
                            <p class="text-muted mb-0">Top Category</p>
                        </div>
                    </div>
                    <div class="col-xl-2 col-md-4 col-6">
                        <div class="p-3">
                            <h5 class="mb-1"><span class="counter-value" data-target="@Model.QuickStats.ActiveRequisitions">@Model.QuickStats.ActiveRequisitions</span></h5>
                            <p class="text-muted mb-0">Active Requests</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Action Required Section -->
@if (Model.HasActionItems)
{
    <div class="row">
        <div class="col-xl-12">
            <div class="card">
                <div class="card-header align-items-center d-flex">
                    <h4 class="card-title mb-0 flex-grow-1">Action Required</h4>
                    <div class="flex-shrink-0">
                        <span class="badge bg-@Model.ActionRequired.AlertLevel fs-12">@Model.ActionRequired.TotalActionItems items</span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        @if (Model.ActionRequired.PendingReceiptConfirmation > 0)
                        {
                            <div class="col-xl-3 col-md-6">
                                <div class="card border border-info mb-0">
                                    <div class="card-body text-center">
                                        <div class="avatar-sm mx-auto mb-3">
                                            <span class="avatar-title rounded-circle bg-info-subtle text-info fs-20">
                                                <i class="ri-file-check-line"></i>
                                            </span>
                                        </div>
                                        <h5 class="mb-1">@Model.ActionRequired.PendingReceiptConfirmation</h5>
                                        <p class="text-muted mb-0">Pending Receipt Confirmation</p>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.ActionRequired.RequiringClarification > 0)
                        {
                            <div class="col-xl-3 col-md-6">
                                <div class="card border border-warning mb-0">
                                    <div class="card-body text-center">
                                        <div class="avatar-sm mx-auto mb-3">
                                            <span class="avatar-title rounded-circle bg-warning-subtle text-warning fs-20">
                                                <i class="ri-question-line"></i>
                                            </span>
                                        </div>
                                        <h5 class="mb-1">@Model.ActionRequired.RequiringClarification</h5>
                                        <p class="text-muted mb-0">Requiring Clarification</p>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.ActionRequired.OverdueItems > 0)
                        {
                            <div class="col-xl-3 col-md-6">
                                <div class="card border border-danger mb-0">
                                    <div class="card-body text-center">
                                        <div class="avatar-sm mx-auto mb-3">
                                            <span class="avatar-title rounded-circle bg-danger-subtle text-danger fs-20">
                                                <i class="ri-timer-line"></i>
                                            </span>
                                        </div>
                                        <h5 class="mb-1">@Model.ActionRequired.OverdueItems</h5>
                                        <p class="text-muted mb-0">Overdue Items</p>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.ActionRequired.ReadyForCollection > 0)
                        {
                            <div class="col-xl-3 col-md-6">
                                <div class="card border border-success mb-0">
                                    <div class="card-body text-center">
                                        <div class="avatar-sm mx-auto mb-3">
                                            <span class="avatar-title rounded-circle bg-success-subtle text-success fs-20">
                                                <i class="ri-truck-line"></i>
                                            </span>
                                        </div>
                                        <h5 class="mb-1">@Model.ActionRequired.ReadyForCollection</h5>
                                        <p class="text-muted mb-0">Ready for Collection</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Two Column Layout: Charts and Recent Requisitions -->
<div class="row">
    <!-- Charts Column -->
    <div class="col-xl-6">
        <!-- Status Distribution Chart -->
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Status Distribution</h4>
                <div class="flex-shrink-0">
                    <div class="dropdown card-header-dropdown">
                        <a class="text-reset dropdown-btn" href="#" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="text-muted">Report<i class="mdi mdi-chevron-down ms-1"></i></span>
                        </a>
                        <div class="dropdown-menu dropdown-menu-end">
                            <a class="dropdown-item" href="#">Download Report</a>
                            <a class="dropdown-item" href="#">Export</a>
                            <a class="dropdown-item" href="#">Import</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div id="status-chart" style="height: 350px;"></div>
            </div>
        </div>

        <!-- Monthly Trend Chart -->
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Monthly Trends</h4>
            </div>
            <div class="card-body">
                <div id="trend-chart" style="height: 300px;"></div>
            </div>
        </div>
    </div>

    <!-- Recent Requisitions Column -->
    <div class="col-xl-6">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Recent Requisitions</h4>
                <div class="flex-shrink-0">
                    <a href="@Url.Action("Index", "Requisitions")" class="btn btn-sm btn-primary">
                        <i class="ri-add-line align-middle me-1"></i> New Requisition
                    </a>
                </div>
            </div>
            <div class="card-body">
                @if (Model.RecentRequisitions != null && Model.RecentRequisitions.Any())
                {
                    <div class="table-responsive table-card">
                        <table class="table table-borderless table-hover table-nowrap align-middle mb-0">
                            <thead class="table-light">
                                <tr class="text-muted">
                                    <th scope="col">ID</th>
                                    <th scope="col">Stations</th>
                                    <th scope="col">Status</th>
                                    <th scope="col">Date</th>
                                    <th scope="col">Items</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var requisition in Model.RecentRequisitions.Take(10))
                                {
                                    <tr class="@(requisition.IsOverdue ? "table-warning" : "")">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <span class="fw-medium">#@requisition.Id</span>
                                                @if (requisition.IsOverdue)
                                                {
                                                    <span class="badge bg-danger ms-2 fs-11">Overdue</span>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <div class="text-truncate" style="max-width: 150px;">
                                                <small class="text-muted">From:</small> @requisition.IssueStation<br/>
                                                <small class="text-muted">To:</small> @requisition.DeliveryStation
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge @requisition.StatusBadgeClass">@requisition.StatusDescription</span>
                                            @if (!string.IsNullOrEmpty(requisition.Priority) && requisition.Priority.ToLower() != "medium")
                                            {
                                                <br/><span class="badge @requisition.PriorityBadgeClass fs-11 mt-1">@requisition.Priority</span>
                                            }
                                        </td>
                                        <td>
                                            <div>
                                                @requisition.FormattedCreatedDate
                                                <br/><small class="@requisition.UrgencyColor">@requisition.DaysInCurrentStatus days in status</small>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="fw-medium">@requisition.ItemCount</span>
                                            <small class="text-muted">items</small>
                                        </td>
                                        <td>
                                            <div class="d-flex gap-2">
                                                <a href="@Url.Action("Details", "Requisitions", new { id = requisition.Id })" class="btn btn-sm btn-soft-primary" title="View Details">
                                                    <i class="ri-eye-line"></i>
                                                </a>
                                                @if (requisition.Status == RequisitionStatus.NotStarted)
                                                {
                                                    <a href="@Url.Action("Edit", "Requisitions", new { id = requisition.Id })" class="btn btn-sm btn-soft-warning" title="Edit">
                                                        <i class="ri-edit-line"></i>
                                                    </a>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <div class="avatar-md mx-auto mb-4">
                            <div class="avatar-title bg-primary-subtle text-primary rounded-circle fs-24">
                                <i class="ri-file-list-3-line"></i>
                            </div>
                        </div>
                        <h5 class="fs-16">No Recent Requisitions</h5>
                        <p class="text-muted mb-3">You haven't created any requisitions yet. Start by creating your first requisition.</p>
                        <a href="@Url.Action("Create", "Requisitions")" class="btn btn-primary">
                            <i class="ri-add-line me-1"></i>Create New Requisition
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Initialize counter animation
            var counterElements = document.querySelectorAll('.counter-value');

            counterElements.forEach(function(element) {
                var target = parseInt(element.getAttribute('data-target'));
                var duration = 1000; // 1 second

                var startTime = null;

                function animate(currentTime) {
                    if (!startTime) startTime = currentTime;
                    var progress = (currentTime - startTime) / duration;

                    if (progress > 1) progress = 1;

                    var currentValue = Math.floor(progress * target);
                    element.textContent = currentValue;

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else {
                        element.textContent = target;
                    }
                }

                requestAnimationFrame(animate);
            });

            // Status Distribution Pie Chart
            var statusChartCtx = document.getElementById('status-chart');
            if (statusChartCtx) {
                var statusChart = new Chart(statusChartCtx, {
                    type: 'doughnut',
                    data: {
                        labels: [
                            @Html.Raw(Json.Serialize(Model.RequisitionStatusCounts.Keys.ToArray()))
                        ],
                        datasets: [{
                            label: 'Requisitions',
                            data: [
                                @Html.Raw(Json.Serialize(Model.RequisitionStatusCounts.Values.ToArray()))
                            ],
                            backgroundColor: [
                                '#405189', // Primary
                                '#0ab39c', // Success
                                '#f7b84b', // Warning
                                '#f06548', // Danger
                                '#299cdb'  // Info
                            ],
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true,
                                    font: {
                                        size: 13
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        var total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        var percentage = ((context.parsed * 100) / total).toFixed(1);
                                        return context.label + ': ' + context.parsed + ' (' + percentage + '%)';
                                    }
                                }
                            }
                        },
                        cutout: '70%',
                        elements: {
                            arc: {
                                borderWidth: 0
                            }
                        }
                    }
                });
            }

            // Monthly Trend Line Chart
            var trendChartCtx = document.getElementById('trend-chart');
            if (trendChartCtx) {
                // Get the monthly data from the model
                @{
                    var monthlyTrendData = Model.TrendData?.RequisitionsByMonth ?? new List<MRIV.ViewModels.MonthlyRequisitionData>();
                }
                var monthlyData = @Html.Raw(Json.Serialize(monthlyTrendData));

                var months = monthlyData.length > 0 ? monthlyData.map(item => item.Month + ' ' + item.Year) : [];
                var totalCounts = monthlyData.length > 0 ? monthlyData.map(item => item.Count) : [];
                var completedCounts = monthlyData.length > 0 ? monthlyData.map(item => item.Completed) : [];
                var pendingCounts = monthlyData.length > 0 ? monthlyData.map(item => item.Pending) : [];

                var trendChart = new Chart(trendChartCtx, {
                    type: 'line',
                    data: {
                        labels: months,
                        datasets: [
                            {
                                label: 'Total Requisitions',
                                data: totalCounts,
                                borderColor: '#405189',
                                backgroundColor: 'rgba(64, 81, 137, 0.1)',
                                borderWidth: 3,
                                fill: true,
                                tension: 0.4
                            },
                            {
                                label: 'Completed',
                                data: completedCounts,
                                borderColor: '#0ab39c',
                                backgroundColor: 'rgba(10, 179, 156, 0.1)',
                                borderWidth: 2,
                                fill: false,
                                tension: 0.4
                            },
                            {
                                label: 'Pending',
                                data: pendingCounts,
                                borderColor: '#f7b84b',
                                backgroundColor: 'rgba(247, 184, 75, 0.1)',
                                borderWidth: 2,
                                fill: false,
                                tension: 0.4
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        interaction: {
                            intersect: false,
                            mode: 'index'
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    usePointStyle: true,
                                    font: {
                                        size: 13
                                    }
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleColor: '#fff',
                                bodyColor: '#fff',
                                borderColor: '#405189',
                                borderWidth: 1
                            }
                        },
                        scales: {
                            x: {
                                display: true,
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            y: {
                                display: true,
                                beginAtZero: true,
                                grid: {
                                    color: 'rgba(160, 160, 160, 0.1)'
                                },
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                }
                            }
                        },
                        elements: {
                            point: {
                                radius: 4,
                                hoverRadius: 6
                            }
                        }
                    }
                });
            }

            // Auto-refresh dashboard data every 5 minutes
            setInterval(function() {
                // Only refresh if the page is visible
                if (!document.hidden) {
                    fetch('@Url.Action("GetDashboardData", "Dashboard")')
                        .then(response => response.json())
                        .then(data => {
                            // Update counters with new data
                            if (data.metrics) {
                                updateCounter('[data-target="' + @Model.TotalRequisitions + '"]', data.metrics.totalRequisitions);
                                updateCounter('[data-target="' + @Model.AwaitingMyAction + '"]', data.metrics.awaitingMyAction);
                                updateCounter('[data-target="' + @Model.ThisMonthRequisitions + '"]', data.metrics.thisMonthRequisitions);
                            }
                        })
                        .catch(error => console.log('Dashboard refresh failed:', error));
                }
            }, 300000); // 5 minutes

            function updateCounter(selector, newValue) {
                var element = document.querySelector(selector);
                if (element) {
                    var currentValue = parseInt(element.textContent);
                    if (currentValue !== newValue) {
                        element.setAttribute('data-target', newValue);
                        animateCounter(element, currentValue, newValue);
                    }
                }
            }

            function animateCounter(element, from, to) {
                var duration = 1000;
                var startTime = null;

                function animate(currentTime) {
                    if (!startTime) startTime = currentTime;
                    var progress = (currentTime - startTime) / duration;

                    if (progress > 1) progress = 1;

                    var currentValue = Math.floor(from + (to - from) * progress);
                    element.textContent = currentValue;

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else {
                        element.textContent = to;
                    }
                }

                requestAnimationFrame(animate);
            }
        });
    </script>
}
