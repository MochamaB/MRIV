@using MRIV.Enums
@model MRIV.ViewModels.MyRequisitionsDashboardViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    ViewData["Title"] = "My Requisitions Dashboard";
}

<!-- User Welcome Section -->

<div class="row mb-3 pb-1">
    <div class="col-12">
        <div class="d-flex align-items-lg-center flex-lg-row flex-column">
            <div class="flex-grow-1">
                <h4 class="fs-16 mb-1">Welcome back, @Model.UserInfo.Name</h4>
                <p class="text-muted mb-0">Here's what's happening with the MRIV system today.</p>
            </div>
            <div class="mt-3 mt-lg-1">
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-primary btn-sm" data-action="refresh">
                        <i class="ri-refresh-line"></i> Refresh
                    </button>
                    @if (Model.HasActionItems)
                    {
                        <button type="button" class="btn btn-primary btn-sm" data-action="show-actions">
                            <i class="ri-notification-line"></i> Actions (@Model.AwaitingMyAction)
                        </button>
                    }
                    <div class="dropdown">
                        <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            <i class="ri-filter-line"></i> Filter
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" data-filter="all">All Requisitions</a></li>
                            <li><a class="dropdown-item" href="#" data-filter="pending">Pending Only</a></li>
                            <li><a class="dropdown-item" href="#" data-filter="completed">Completed Only</a></li>
                            <li><a class="dropdown-item" href="#" data-filter="thisMonth">This Month</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div><!-- end card header -->
    </div>
    <!--end col-->
</div>

<!-- Action Required Alerts -->
@if (Model.HasActionItems)
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-@Model.ActionRequired.AlertLevel alert-dismissible alert-additional fade show" role="alert">
                <div class="alert-body">
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    <div class="d-flex">
                        <div class="flex-shrink-0 me-3">
                            @if (Model.ActionRequired.AlertLevel == "danger")
                            {
                                <i class="ri-error-warning-line fs-16 align-middle"></i>
                            }
                            else if (Model.ActionRequired.AlertLevel == "warning")
                            {
                                <i class="ri-alert-line fs-16 align-middle"></i>
                            }
                            else
                            {
                                <i class="ri-information-line fs-16 align-middle"></i>
                            }
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="alert-heading">Action Required</h5>
                            <p class="mb-0">@Model.ActionRequired.PriorityMessage</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



<!-- Primary Metrics Row -->
<div class="row">
    <!-- Total Requisitions Widget -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-muted mb-0">Total Requisitions</p>
                        <h2 class="mt-4 ff-secondary fw-semibold">
                            <span class="counter-value" data-target="@Model.TotalRequisitions">@Model.TotalRequisitions</span>
                        </h2>
                        <p class="mb-0 text-muted">
                            @{
                                var totalTrendClass = Model.TotalRequisitionsTrend >= 0 ? "text-success" : "text-danger";
                                var totalTrendIcon = Model.TotalRequisitionsTrend >= 0 ? "ri-arrow-up-line" : "ri-arrow-down-line";
                            }
                            <span class="badge bg-light @totalTrendClass mb-0">
                                <i class="@totalTrendIcon align-middle"></i> @Model.TotalRequisitionsTrend.ToString("F1") %
                            </span> vs. previous month
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-info-subtle rounded-circle fs-2">
                                <i data-feather="clipboard" class="text-info material-shadow"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Awaiting My Action Widget -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate @(Model.AwaitingMyAction > 0 ? "border-warning" : "")">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-muted mb-0">Awaiting My Action</p>
                        <h2 class="mt-4 ff-secondary fw-semibold">
                            <span class="counter-value" data-target="@Model.AwaitingMyAction">@Model.AwaitingMyAction</span>
                        </h2>
                        <p class="mb-0 text-muted">
                            @if (Model.AwaitingMyAction > 0)
                            {
                                <span class="badge bg-warning text-dark mb-0">
                                    <i class="ri-time-line align-middle"></i> Needs Attention
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-success text-white mb-0">
                                    <i class="ri-check-line align-middle"></i> All Caught Up
                                </span>
                            }
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-warning-subtle rounded-circle fs-2 material-shadow">
                                <i data-feather="bell" class="text-warning"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- This Month Requisitions Widget -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate bg-primary">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-muted mb-0" style="color:#fff !important">This Month</p>
                        <h2 class="mt-4 ff-secondary fw-semibold" style="color:#fff !important">
                            <span class="counter-value" data-target="@Model.ThisMonthRequisitions">@Model.ThisMonthRequisitions</span>
                        </h2>
                        <p class="mb-0 text-muted" style="color:#fff !important">
                            @{
                                var monthlyTrendClass = Model.ThisMonthTrend >= 0 ? "text-success" : "text-danger";
                                var monthlyTrendIcon = Model.ThisMonthTrend >= 0 ? "ri-arrow-up-line" : "ri-arrow-down-line";
                            }
                            <span class="badge bg-light @monthlyTrendClass mb-0">
                                <i class="@monthlyTrendIcon align-middle"></i> @Model.ThisMonthTrend.ToString("F1") %
                            </span> vs. last month
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-white-subtle rounded-circle fs-2 material-shadow">
                                <i data-feather="calendar" class="text-white"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Widget -->
    <div class="col-xl-3 col-md-6">
        <div class="card card-animate border-@Model.PerformanceColor">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="fw-medium text-muted mb-0">Completion Rate</p>
                        <h2 class="mt-4 ff-secondary fw-semibold">
                            <span class="counter-value" data-target="@((int)Model.CompletionRate)">@Model.CompletionRate.ToString("F1")</span>%
                        </h2>
                        <p class="mb-0 text-muted">
                            <span class="badge bg-@Model.PerformanceColor text-white mb-0">
                                <i class="ri-trophy-line align-middle"></i> @Model.PerformanceStatus
                            </span>
                        </p>
                    </div>
                    <div>
                        <div class="avatar-sm flex-shrink-0">
                            <span class="avatar-title bg-@(Model.PerformanceColor)-subtle rounded-circle fs-2 material-shadow">
                                <i data-feather="trending-up" class="text-@Model.PerformanceColor"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Quick Stats CRM Widget -->
<div class="row">
    <div class="col-xl-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title mb-0">Quick Insights</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-xl-2 col-md-4 col-6" style="border-right: 2px solid #dee2e6;">
                        <div class="p-3 border border-dashed border-start-0 border-top-0 border-end-0">
                            <h5 class="mb-1"><span class="counter-value" data-target="@Model.QuickStats.CompletedThisMonth">@Model.QuickStats.CompletedThisMonth</span></h5>
                            <p class="text-muted mb-0">Completed This Month</p>
                        </div>
                    </div>
                    <div class="col-xl-2 col-md-4 col-6" style="border-right: 2px solid #dee2e6;">
                        <div class="p-3 border border-dashed border-start-0 border-top-0 border-end-0">
                            <h5 class="mb-1">@Model.QuickStats.FormattedAverageItems</h5>
                            <p class="text-muted mb-0">Avg Items/Request</p>
                        </div>
                    </div>
                    <div class="col-xl-2 col-md-4 col-6" style="border-right: 2px solid #dee2e6;">
                        <div class="p-3 border border-dashed border-start-0 border-top-0 border-end-0">
                            <h5 class="mb-1">@Model.FormattedAverageProcessingDays</h5>
                            <p class="text-muted mb-0">Avg Processing Time</p>
                        </div>
                    </div>
                    <div class="col-xl-2 col-md-4 col-6" style="border-right: 2px solid #dee2e6;">
                        <div class="p-3 border border-dashed border-start-0 border-top-0 border-end-0">
                            <h5 class="mb-1"><span class="counter-value" data-target="@Model.QuickStats.TotalItemsRequested">@Model.QuickStats.TotalItemsRequested</span></h5>
                            <p class="text-muted mb-0">Total Items Requested</p>
                        </div>
                    </div>
                    <div class="col-xl-2 col-md-4 col-6" style="border-right: 2px solid #dee2e6;">
                        <div class="p-3 border border-dashed border-start-0 border-top-0 border-end-0">
                            <h5 class="mb-1">@(string.IsNullOrEmpty(Model.QuickStats.MostRequestedCategory) ? "N/A" : Model.QuickStats.MostRequestedCategory)</h5>
                            <p class="text-muted mb-0">Top Category</p>
                        </div>
                    </div>
                    <div class="col-xl-2 col-md-4 col-6" style="border-right: 2px solid #dee2e6;">
                        <div class="p-3">
                            <h5 class="mb-1"><span class="counter-value" data-target="@Model.QuickStats.ActiveRequisitions">@Model.QuickStats.ActiveRequisitions</span></h5>
                            <p class="text-muted mb-0">Active Requests</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Action Required Section -->
@if (Model.HasActionItems)
{
    <div class="row">
        <div class="col-xl-12">
            <div class="card">
                <div class="card-header align-items-center d-flex">
                    <h4 class="card-title mb-0 flex-grow-1">Action Required</h4>
                    <div class="flex-shrink-0">
                        <span class="badge bg-@Model.ActionRequired.AlertLevel fs-12">@Model.ActionRequired.TotalActionItems items</span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        @if (Model.ActionRequired.PendingReceiptConfirmation > 0)
                        {
                            <div class="col-xl-3 col-md-6">
                                <div class="card border border-info mb-0">
                                    <div class="card-body text-center">
                                        <div class="avatar-sm mx-auto mb-3">
                                            <span class="avatar-title rounded-circle bg-info-subtle text-info fs-20">
                                                <i class="ri-file-check-line"></i>
                                            </span>
                                        </div>
                                        <h5 class="mb-1">@Model.ActionRequired.PendingReceiptConfirmation</h5>
                                        <p class="text-muted mb-0">Pending Receipt Confirmation</p>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.ActionRequired.RequiringClarification > 0)
                        {
                            <div class="col-xl-3 col-md-6">
                                <div class="card border border-warning mb-0">
                                    <div class="card-body text-center">
                                        <div class="avatar-sm mx-auto mb-3">
                                            <span class="avatar-title rounded-circle bg-warning-subtle text-warning fs-20">
                                                <i class="ri-question-line"></i>
                                            </span>
                                        </div>
                                        <h5 class="mb-1">@Model.ActionRequired.RequiringClarification</h5>
                                        <p class="text-muted mb-0">Requiring Clarification</p>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.ActionRequired.OverdueItems > 0)
                        {
                            <div class="col-xl-3 col-md-6">
                                <div class="card border border-danger mb-0">
                                    <div class="card-body text-center">
                                        <div class="avatar-sm mx-auto mb-3">
                                            <span class="avatar-title rounded-circle bg-danger-subtle text-danger fs-20">
                                                <i class="ri-timer-line"></i>
                                            </span>
                                        </div>
                                        <h5 class="mb-1">@Model.ActionRequired.OverdueItems</h5>
                                        <p class="text-muted mb-0">Overdue Items</p>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.ActionRequired.ReadyForCollection > 0)
                        {
                            <div class="col-xl-3 col-md-6">
                                <div class="card border border-success mb-0">
                                    <div class="card-body text-center">
                                        <div class="avatar-sm mx-auto mb-3">
                                            <span class="avatar-title rounded-circle bg-success-subtle text-success fs-20">
                                                <i class="ri-truck-line"></i>
                                            </span>
                                        </div>
                                        <h5 class="mb-1">@Model.ActionRequired.ReadyForCollection</h5>
                                        <p class="text-muted mb-0">Ready for Collection</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Two Column Layout: Charts and Recent Requisitions -->
<div class="row">
    <!-- Charts Column -->
    <div class="col-xl-6">
        <!-- Status Distribution Chart -->
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Status Distribution</h4>
                <div class="flex-shrink-0">
                    <div class="dropdown card-header-dropdown">
                        <a class="text-reset dropdown-btn" href="#" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="text-muted">Report<i class="mdi mdi-chevron-down ms-1"></i></span>
                        </a>
                        <div class="dropdown-menu dropdown-menu-end">
                            <a class="dropdown-item" href="#">Download Report</a>
                            <a class="dropdown-item" href="#">Export</a>
                            <a class="dropdown-item" href="#">Import</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <canvas id="status-chart" class="chart-container" style="height: 350px;"></canvas>
            </div>
        </div>

        <!-- Monthly Trend Chart -->
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Monthly Trends</h4>
            </div>
            <div class="card-body">
                <canvas id="trend-chart" class="chart-container" style="height: 300px;"></canvas>
            </div>
        </div>
    </div>

    <!-- Recent Requisitions Column -->
    <div class="col-xl-6">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Recent Requisitions</h4>
                <div class="flex-shrink-0">
                    <a href="@Url.Action("Index", "Requisitions")" class="btn btn-sm btn-primary">
                        <i class="ri-add-line align-middle me-1"></i> New Requisition
                    </a>
                </div>
            </div>
            <div class="card-body">
                @if (Model.RecentRequisitions != null && Model.RecentRequisitions.Any())
                {
                    <div class="table-responsive table-card">
                        <table class="table table-borderless table-hover table-nowrap align-middle mb-0">
                            <thead class="table-light">
                                <tr class="text-muted">
                                    <th scope="col">ID</th>
                                    <th scope="col">Stations</th>
                                    <th scope="col">Status</th>
                                    <th scope="col">Date</th>
                                    <th scope="col">Items</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var requisition in Model.RecentRequisitions.Take(10))
                                {
                                    <tr class="@(requisition.IsOverdue ? "table-warning" : "")">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <span class="fw-medium">#@requisition.Id</span>
                                                @if (requisition.IsOverdue)
                                                {
                                                    <span class="badge bg-danger ms-2 fs-11">Overdue</span>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <div class="text-truncate" style="max-width: 150px;">
                                                <small class="text-muted">From:</small> @requisition.IssueStation<br/>
                                                <small class="text-muted">To:</small> @requisition.DeliveryStation
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge @requisition.StatusBadgeClass">@requisition.StatusDescription</span>
                                            @if (!string.IsNullOrEmpty(requisition.Priority) && requisition.Priority.ToLower() != "medium")
                                            {
                                                <br/><span class="badge @requisition.PriorityBadgeClass fs-11 mt-1">@requisition.Priority</span>
                                            }
                                        </td>
                                        <td>
                                            <div>
                                                @requisition.FormattedCreatedDate
                                                <br/><small class="@requisition.UrgencyColor">@requisition.DaysInCurrentStatus days in status</small>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="fw-medium">@requisition.ItemCount</span>
                                            <small class="text-muted">items</small>
                                        </td>
                                        <td>
                                            <div class="d-flex gap-2">
                                                <a href="@Url.Action("Details", "Requisitions", new { id = requisition.Id })" class="btn btn-sm btn-soft-primary" title="View Details">
                                                    <i class="ri-eye-line"></i>
                                                </a>
                                                @if (requisition.Status == RequisitionStatus.NotStarted)
                                                {
                                                    <a href="@Url.Action("Edit", "Requisitions", new { id = requisition.Id })" class="btn btn-sm btn-soft-warning" title="Edit">
                                                        <i class="ri-edit-line"></i>
                                                    </a>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <div class="avatar-md mx-auto mb-4">
                            <div class="avatar-title bg-primary-subtle text-primary rounded-circle fs-24">
                                <i class="ri-file-list-3-line"></i>
                            </div>
                        </div>
                        <h5 class="fs-16">No Recent Requisitions</h5>
                        <p class="text-muted mb-3">You haven't created any requisitions yet. Start by creating your first requisition.</p>
                        <a href="@Url.Action("Create", "Requisitions")" class="btn btn-primary">
                            <i class="ri-add-line me-1"></i>Create New Requisition
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>
        /* Enhanced Dashboard Animations */
        .card-animate {
            transition: all 0.3s ease-out;
        }

        .card-animate:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .counter-value.updated {
            animation: pulse 0.6s ease-out;
        }

        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); color: #28a745; }
            100% { transform: scale(1); }
        }

        .notification-toast {
            animation: slideInRight 0.3s ease-out;
        }

        @@keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .ri-loader-4-line.spin {
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        /* Enhanced Card Hover Effects */
        .card {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        /* Filter Button Active State */
        .dropdown-item.active {
            background-color: var(--bs-primary);
            color: white;
        }

        /* Chart Container Enhancement */
        .chart-container {
            position: relative;
            opacity: 0;
            animation: fadeInUp 0.6s ease-out forwards;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Action Required Animation */
        .alert-additional {
            animation: slideInDown 0.5s ease-out;
        }

        @@keyframes slideInDown {
            from {
                transform: translateY(-100%);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* Loading States */
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }
    </style>

    <script>
        // DashboardManager Class - Enhanced Dashboard Management
        class DashboardManager {
            constructor(options) {
                this.statusChart = options.statusChart;
                this.trendChart = options.trendChart;
                this.refreshInterval = options.refreshInterval || 300000; // 5 minutes default
                this.apiEndpoints = options.apiEndpoints || {};
                this.refreshTimer = null;
                this.isRefreshing = false;

                // Animation settings
                this.animationDuration = 1000;
                this.animationEasing = 'ease-out';

                this.init();
            }

            init() {
                this.bindEvents();
                this.setupActionModals();
                this.initializeFilters();
                this.setupResponsiveAnimations();
                console.log('DashboardManager initialized');
            }

            // Event Binding
            bindEvents() {
                // Refresh button click
                document.addEventListener('click', (e) => {
                    if (e.target.matches('[data-action="refresh"]')) {
                        e.preventDefault();
                        this.manualRefresh();
                    }
                });

                // Action item clicks
                document.addEventListener('click', (e) => {
                    if (e.target.matches('[data-action="show-actions"]')) {
                        e.preventDefault();
                        this.showActionModal();
                    }
                });

                // Chart filter clicks
                document.addEventListener('click', (e) => {
                    if (e.target.matches('[data-filter]')) {
                        e.preventDefault();
                        this.applyFilter(e.target.dataset.filter);
                    }
                });
            }

            // Auto-refresh functionality
            startAutoRefresh() {
                this.refreshTimer = setInterval(() => {
                    if (!document.hidden && !this.isRefreshing) {
                        this.refreshData();
                    }
                }, this.refreshInterval);
            }

            stopAutoRefresh() {
                if (this.refreshTimer) {
                    clearInterval(this.refreshTimer);
                    this.refreshTimer = null;
                }
            }

            // Manual refresh with visual feedback
            async manualRefresh() {
                const refreshBtn = document.querySelector('[data-action="refresh"]');
                if (refreshBtn) {
                    refreshBtn.innerHTML = '<i class="ri-loader-4-line spin"></i> Refreshing...';
                    refreshBtn.disabled = true;
                }

                try {
                    await this.refreshData();
                    this.showNotification('Dashboard refreshed successfully', 'success');
                } catch (error) {
                    this.showNotification('Failed to refresh dashboard', 'error');
                } finally {
                    if (refreshBtn) {
                        refreshBtn.innerHTML = '<i class="ri-refresh-line"></i> Refresh';
                        refreshBtn.disabled = false;
                    }
                }
            }

            // Data refresh
            async refreshData() {
                if (this.isRefreshing) return;
                this.isRefreshing = true;

                try {
                    const [dashboardData, chartData] = await Promise.all([
                        this.fetchData(this.apiEndpoints.dashboardData),
                        this.fetchData(this.apiEndpoints.chartData)
                    ]);

                    if (dashboardData.success) {
                        this.updateMetrics(dashboardData.data);
                    }

                    if (chartData.success) {
                        this.updateCharts(chartData.data);
                    }

                } catch (error) {
                    console.error('Dashboard refresh failed:', error);
                } finally {
                    this.isRefreshing = false;
                }
            }

            // Fetch data helper
            async fetchData(url) {
                const response = await fetch(url);
                return await response.json();
            }

            // Update metrics with animation
            updateMetrics(data) {
                if (data.totalRequisitions !== undefined) {
                    this.animateCounter('[data-target]', data.totalRequisitions, 'total');
                }
                if (data.awaitingAction !== undefined) {
                    this.animateCounter('[data-target]', data.awaitingAction, 'awaiting');
                }
                if (data.thisMonth !== undefined) {
                    this.animateCounter('[data-target]', data.thisMonth, 'monthly');
                }
            }

            // Enhanced counter animation
            animateCounter(selector, newValue, type) {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    const currentValue = parseInt(element.textContent) || 0;
                    if (currentValue !== newValue) {
                        this.animateNumberChange(element, currentValue, newValue);
                    }
                });
            }

            animateNumberChange(element, from, to) {
                const duration = this.animationDuration;
                const startTime = performance.now();

                const animate = (currentTime) => {
                    const elapsed = currentTime - startTime;
                    const progress = Math.min(elapsed / duration, 1);

                    // Easing function
                    const easedProgress = 1 - Math.pow(1 - progress, 3);

                    const currentValue = Math.floor(from + (to - from) * easedProgress);
                    element.textContent = currentValue;

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else {
                        element.textContent = to;
                        element.classList.add('updated');
                        setTimeout(() => element.classList.remove('updated'), 1000);
                    }
                };

                requestAnimationFrame(animate);
            }

            // Update charts
            updateCharts(data) {
                if (this.statusChart && data.statusDistribution) {
                    this.statusChart.data.datasets[0].data = Object.values(data.statusDistribution);
                    this.statusChart.update('active');
                }

                if (this.trendChart && data.monthlyTrend) {
                    const monthlyData = data.monthlyTrend;
                    this.trendChart.data.labels = monthlyData.map(item => item.Month + ' ' + item.Year);
                    this.trendChart.data.datasets[0].data = monthlyData.map(item => item.Count);
                    this.trendChart.data.datasets[1].data = monthlyData.map(item => item.Completed);
                    this.trendChart.data.datasets[2].data = monthlyData.map(item => item.Pending);
                    this.trendChart.update('active');
                }
            }

            // Action Modal Setup
            setupActionModals() {
                // Create modal if it doesn't exist
                if (!document.getElementById('actionModal')) {
                    const modalHtml = `
                        <div class="modal fade" id="actionModal" tabindex="-1">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Action Required Items</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                    </div>
                                    <div class="modal-body" id="actionModalBody">
                                        <div class="text-center">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>`;
                    document.body.insertAdjacentHTML('beforeend', modalHtml);
                }
            }

            // Show action modal
            async showActionModal() {
                const modal = new bootstrap.Modal(document.getElementById('actionModal'));
                const modalBody = document.getElementById('actionModalBody');

                modalBody.innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"></div></div>';
                modal.show();

                try {
                    const response = await this.fetchData(this.apiEndpoints.dashboardData);
                    if (response.success && response.data.actionRequired) {
                        this.renderActionItems(modalBody, response.data.actionRequired);
                    }
                } catch (error) {
                    modalBody.innerHTML = '<div class="alert alert-danger">Failed to load action items</div>';
                }
            }

            renderActionItems(container, actionData) {
                const html = `
                    <div class="row g-3">
                        ${actionData.pendingReceipt > 0 ? `
                            <div class="col-md-6">
                                <div class="card border-info">
                                    <div class="card-body">
                                        <h6 class="text-info"><i class="ri-file-check-line"></i> Pending Receipt</h6>
                                        <p class="mb-0">${actionData.pendingReceipt} items awaiting confirmation</p>
                                    </div>
                                </div>
                            </div>
                        ` : ''}
                        ${actionData.overdue > 0 ? `
                            <div class="col-md-6">
                                <div class="card border-danger">
                                    <div class="card-body">
                                        <h6 class="text-danger"><i class="ri-timer-line"></i> Overdue Items</h6>
                                        <p class="mb-0">${actionData.overdue} items are overdue</p>
                                    </div>
                                </div>
                            </div>
                        ` : ''}
                    </div>`;
                container.innerHTML = html || '<div class="alert alert-success">No action items required!</div>';
            }

            // Filter functionality
            initializeFilters() {
                const filterButtons = document.querySelectorAll('[data-filter]');
                filterButtons.forEach(btn => {
                    btn.addEventListener('click', () => {
                        filterButtons.forEach(b => b.classList.remove('active'));
                        btn.classList.add('active');
                    });
                });
            }

            applyFilter(filterType) {
                // Filter logic can be enhanced based on requirements
                console.log('Applying filter:', filterType);
                this.showNotification(`Filter applied: ${filterType}`, 'info');
            }

            // Responsive animations
            setupResponsiveAnimations() {
                // Add fade-in animation to cards
                const cards = document.querySelectorAll('.card');
                cards.forEach((card, index) => {
                    card.style.opacity = '0';
                    card.style.transform = 'translateY(20px)';
                    card.style.transition = 'opacity 0.6s ease-out, transform 0.6s ease-out';

                    setTimeout(() => {
                        card.style.opacity = '1';
                        card.style.transform = 'translateY(0)';
                    }, index * 100);
                });

                // Add hover effects
                this.addHoverEffects();
            }

            addHoverEffects() {
                const metricCards = document.querySelectorAll('.card-animate');
                metricCards.forEach(card => {
                    card.addEventListener('mouseenter', () => {
                        card.style.transform = 'translateY(-5px)';
                        card.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';
                    });

                    card.addEventListener('mouseleave', () => {
                        card.style.transform = 'translateY(0)';
                        card.style.boxShadow = '';
                    });
                });
            }

            // Notification system
            showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `alert alert-${type} notification-toast position-fixed`;
                notification.style.cssText = 'top: 20px; right: 20px; z-index: 1060; min-width: 300px;';
                notification.innerHTML = `
                    <div class="d-flex align-items-center">
                        <i class="ri-${type === 'success' ? 'check' : type === 'error' ? 'error-warning' : 'information'}-line me-2"></i>
                        ${message}
                        <button type="button" class="btn-close ms-auto" onclick="this.parentElement.parentElement.remove()"></button>
                    </div>`;

                document.body.appendChild(notification);

                // Auto remove after 3 seconds
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 3000);
            }

            // Cleanup
            destroy() {
                this.stopAutoRefresh();
                console.log('DashboardManager destroyed');
            }
        }
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Debug: Log the entire model data
            console.log('=== DASHBOARD MODEL DEBUG ===');
            console.log('Model.RequisitionStatusCounts:', @Html.Raw(Json.Serialize(Model.RequisitionStatusCounts ?? new Dictionary<string, int>())));
            console.log('Model.TrendData:', @Html.Raw(Json.Serialize(Model.TrendData ?? new object())));
            console.log('Model.RecentRequisitions count:', @(Model.RecentRequisitions?.Count() ?? 0));
            console.log('Model.QuickStats:', @Html.Raw(Json.Serialize(Model.QuickStats ?? new object())));
            console.log('Model.ActionRequired:', @Html.Raw(Json.Serialize(Model.ActionRequired ?? new object())));
            console.log('Basic Metrics:', {
                TotalRequisitions: @Model.TotalRequisitions,
                PendingRequisitions: @Model.PendingRequisitions,
                CompletedRequisitions: @Model.CompletedRequisitions,
                AwaitingMyAction: @Model.AwaitingMyAction,
                ThisMonthRequisitions: @Model.ThisMonthRequisitions,
                OverdueRequisitions: @Model.OverdueRequisitions
            });
            console.log('User Info:', @Html.Raw(Json.Serialize(Model.UserInfo ?? new object())));
            console.log('=== END MODEL DEBUG ===');

            // Initialize counter animation
            var counterElements = document.querySelectorAll('.counter-value');

            counterElements.forEach(function(element) {
                var target = parseInt(element.getAttribute('data-target'));
                var duration = 1000; // 1 second

                var startTime = null;

                function animate(currentTime) {
                    if (!startTime) startTime = currentTime;
                    var progress = (currentTime - startTime) / duration;

                    if (progress > 1) progress = 1;

                    var currentValue = Math.floor(progress * target);
                    element.textContent = currentValue;

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else {
                        element.textContent = target;
                    }
                }

                requestAnimationFrame(animate);
            });

            // Status Distribution Pie Chart
            var statusChart = null;
            var statusChartCtx = document.getElementById('status-chart');
            if (statusChartCtx) {
                try {
                    // Debug: Log the chart data
                    var statusLabels = @Html.Raw(Json.Serialize(Model.RequisitionStatusCounts?.Keys?.ToArray() ?? new string[0]));
                    var statusData = @Html.Raw(Json.Serialize(Model.RequisitionStatusCounts?.Values?.ToArray() ?? new int[0]));

                    console.log('Status Chart Data:', { labels: statusLabels, data: statusData });

                    // Use fallback data if empty
                    if (statusLabels.length === 0) {
                        statusLabels = ['No Data'];
                        statusData = [1];
                    }

                    statusChart = new Chart(statusChartCtx, {
                    type: 'doughnut',
                    data: {
                        labels: statusLabels,
                        datasets: [{
                            label: 'Requisitions',
                            data: statusData,
                            backgroundColor: [
                                '#405189', // Primary
                                '#0ab39c', // Success
                                '#f7b84b', // Warning
                                '#f06548', // Danger
                                '#299cdb'  // Info
                            ],
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true,
                                    font: {
                                        size: 13
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        var total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        var percentage = ((context.parsed * 100) / total).toFixed(1);
                                        return context.label + ': ' + context.parsed + ' (' + percentage + '%)';
                                    }
                                }
                            }
                        },
                        cutout: '70%',
                        elements: {
                            arc: {
                                borderWidth: 0
                            }
                        }
                    }
                });
                console.log('Status chart created successfully');
                } catch (error) {
                    console.error('Error creating status chart:', error);
                    statusChartCtx.innerHTML = '<div class="text-center text-muted p-4">Chart data not available</div>';
                }
            }

            // Monthly Trend Line Chart
            var trendChart = null;
            var trendChartCtx = document.getElementById('trend-chart');
            if (trendChartCtx) {
                try {
                    // Get the monthly data from the model
                    @{
                        var monthlyTrendData = Model.TrendData?.RequisitionsByMonth ?? new List<MRIV.ViewModels.MonthlyRequisitionData>();
                    }
                    var monthlyData = @Html.Raw(Json.Serialize(monthlyTrendData));

                console.log('Trend Chart Data:', monthlyData);

                // Use fallback data if empty
                var months, totalCounts, completedCounts, pendingCounts;

                if (monthlyData.length > 0) {
                    months = monthlyData.map(item => item.Month + ' ' + item.Year);
                    totalCounts = monthlyData.map(item => item.Count);
                    completedCounts = monthlyData.map(item => item.Completed);
                    pendingCounts = monthlyData.map(item => item.Pending);
                } else {
                    // Fallback data for empty dataset
                    var currentDate = new Date();
                    months = [
                        'Jan ' + currentDate.getFullYear(),
                        'Feb ' + currentDate.getFullYear(),
                        'Mar ' + currentDate.getFullYear()
                    ];
                    totalCounts = [0, 0, 0];
                    completedCounts = [0, 0, 0];
                    pendingCounts = [0, 0, 0];
                }

                trendChart = new Chart(trendChartCtx, {
                    type: 'line',
                    data: {
                        labels: months,
                        datasets: [
                            {
                                label: 'Total Requisitions',
                                data: totalCounts,
                                borderColor: '#405189',
                                backgroundColor: 'rgba(64, 81, 137, 0.1)',
                                borderWidth: 3,
                                fill: true,
                                tension: 0.4
                            },
                            {
                                label: 'Completed',
                                data: completedCounts,
                                borderColor: '#0ab39c',
                                backgroundColor: 'rgba(10, 179, 156, 0.1)',
                                borderWidth: 2,
                                fill: false,
                                tension: 0.4
                            },
                            {
                                label: 'Pending',
                                data: pendingCounts,
                                borderColor: '#f7b84b',
                                backgroundColor: 'rgba(247, 184, 75, 0.1)',
                                borderWidth: 2,
                                fill: false,
                                tension: 0.4
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        interaction: {
                            intersect: false,
                            mode: 'index'
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    usePointStyle: true,
                                    font: {
                                        size: 13
                                    }
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleColor: '#fff',
                                bodyColor: '#fff',
                                borderColor: '#405189',
                                borderWidth: 1
                            }
                        },
                        scales: {
                            x: {
                                display: true,
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            y: {
                                display: true,
                                beginAtZero: true,
                                grid: {
                                    color: 'rgba(160, 160, 160, 0.1)'
                                },
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                }
                            }
                        },
                        elements: {
                            point: {
                                radius: 4,
                                hoverRadius: 6
                            }
                        }
                    }
                });
                console.log('Trend chart created successfully');
                } catch (error) {
                    console.error('Error creating trend chart:', error);
                    trendChartCtx.innerHTML = '<div class="text-center text-muted p-4">Chart data not available</div>';
                }
            }

            // Initialize DashboardManager with enhanced features
            const dashboardManager = new DashboardManager({
                statusChart: statusChart,
                trendChart: trendChart,
                refreshInterval: 300000, // 5 minutes
                apiEndpoints: {
                    dashboardData: '@Url.Action("GetDashboardData", "Dashboard")',
                    chartData: '@Url.Action("GetChartData", "Dashboard")',
                    recentRequisitions: '@Url.Action("GetRecentRequisitions", "Dashboard")'
                }
            });

            // Start auto-refresh and show initialization notification
            dashboardManager.startAutoRefresh();
            dashboardManager.showNotification('Dashboard initialized successfully', 'success');
        });
    </script>
}
