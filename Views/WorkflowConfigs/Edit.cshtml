@model MRIV.ViewModels.WorkflowConfigViewModel

@{
    ViewData["Title"] = "Edit Workflow Configuration";
}

<div class="contwrapper">
    <h4>Edit Workflow Configuration</h4>
    <hr />

    <form asp-action="Edit" method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="WorkflowConfig.Id" />

        <h5>Workflow Details</h5>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="WorkflowConfig.IssueStationCategory" class="control-label">Issue Station Category</label>
                    <select asp-for="WorkflowConfig.IssueStationCategory" asp-items="Model.IssueStationCategories" class="formcontrol2">
                        <option value="">-- Select Issue Station Category --</option>
                    </select>
                    <span asp-validation-for="WorkflowConfig.IssueStationCategory" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="WorkflowConfig.DeliveryStationCategory" class="control-label">Delivery Station Category</label>
                    <select asp-for="WorkflowConfig.DeliveryStationCategory" asp-items="Model.DeliveryStationCategories" class="formcontrol2">
                        <option value="">-- Select Delivery Station Category --</option>
                    </select>
                    <span asp-validation-for="WorkflowConfig.DeliveryStationCategory" class="text-danger"></span>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-between align-items-center">
            <h5>Workflow Steps</h5>
            <button type="submit" formaction="@Url.Action("AddStep")" class="btn btn-primary mb-3">
                <i class="mdi mdi-plus-circle-outline"></i> Add Step
            </button>
        </div>
        <div class="card-body">
            @if (Model.Steps != null && Model.Steps.Any())
            {
                <div class="table-responsive">
                    <table class="table ">
                        <thead class="thead-light">
                            <tr>
                                <th>Order</th>
                                <th>Step Name</th>
                                <th>Approver Role</th>
                                <th>Step Action</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < Model.Steps.Count; i++)
                            {
                                <tr class="step-row" data-step-index="@i" data-step-id="@Model.Steps[i].Id">
                                    <td style="width: 10%">
                                        <input asp-for="Steps[i].Id" type="hidden" />
                                        <input asp-for="Steps[i].StepOrder" class="form-control" readonly />
                                        <!-- Add hidden fields for storing JSON parameters -->
                                        <input asp-for="Steps[i].RoleParametersJson" type="hidden" id="role-params-json-@i" />
                                        <input asp-for="Steps[i].ConditionsJson" type="hidden" id="conditions-json-@i" />
                                    </td>
                                    <td style="width: 40%">
                                        <input asp-for="Steps[i].StepName" class="form-control" />
                                        <span asp-validation-for="Steps[i].StepName" class="text-danger"></span>
                                    </td>
                                    <td style="width: 30%">
                                        <select asp-for="Steps[i].ApproverRole" asp-items="Model.ApproverRoles" class="formcontrol2">
                                            <option value="">-- Select Role --</option>
                                        </select>
                                        <span asp-validation-for="Steps[i].ApproverRole" class="text-danger"></span>
                                    </td>
                                    <td style="width: 40%">
                                        <input asp-for="Steps[i].StepAction" class="form-control" />
                                        <span asp-validation-for="Steps[i].StepAction" class="text-danger"></span>
                                    </td>
                                    <td style="width: 20%">
                                        <div class="btn-group " role="group">
                                            <button type="button" class="btn btn-hazard btn-sm open-parameters-modal"
                                                    data-step-index="@i"
                                                    data-step-id="@Model.Steps[i].Id"
                                                    data-workflow-id="@Model.WorkflowConfig.Id">
                                                <i class="mdi mdi-cogs"></i> Parameters
                                            </button>
                                            <button type="submit" formaction="@Url.Action("CloneStep", new { stepIndex = i })" class="btn btn-primary">
                                                <i class="mdi mdi-content-copy"></i> Clone
                                            </button>
                                            <button type="submit" formaction="@Url.Action("RemoveStep", new { stepIndex = i })" class="btn btn-danger">
                                                <i class="mdi mdi-delete"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <p>No steps have been added to this workflow yet. Click "Add Step" to begin.</p>
                </div>
            }
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </form>
</div>

<!-- Modal template for parameter editing -->
<div class="modal fade" id="parameters-modal" tabindex="-1" aria-labelledby="parameters-modal-label" aria-hidden="true">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="parameters-modal-label">Edit Step Parameters</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="modal-parameters-container">
                    <!-- Parameters will be loaded here dynamically -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary save-parameters-btn">Save Changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Use a single modal instance
        let parametersModal;

        // Keep track of the current step being edited
        let currentStepId = 0;
        let currentStepIndex = 0;
        let currentWorkflowId = @Model.WorkflowConfig.Id;

        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM loaded, initializing workflow editor');

            // Initialize the modal
            parametersModal = new bootstrap.Modal(document.getElementById('parameters-modal'));

            // Set up event handlers
            setupParameterEditingHandlers();
        });

        function setupParameterEditingHandlers() {
            // Open parameters modal
            document.querySelectorAll('.open-parameters-modal').forEach(button => {
                button.addEventListener('click', openParametersModal);
            });

            // Save parameters
            document.querySelector('.save-parameters-btn').addEventListener('click', saveParameters);

            // Add parameter button
            document.addEventListener('click', function (e) {
                if (e.target.classList.contains('add-parameter-btn') ||
                    e.target.closest('.add-parameter-btn')) {
                    addParameter(e);
                }
            });

            // Remove parameter button
            document.addEventListener('click', function (e) {
                if (e.target.classList.contains('remove-parameter-btn') ||
                    e.target.closest('.remove-parameter-btn')) {
                    removeParameter(e);
                }
            });
        }

        function openParametersModal(e) {
            const button = e.target.closest('.open-parameters-modal');
            currentStepIndex = parseInt(button.dataset.stepIndex);
            currentStepId = parseInt(button.dataset.stepId) || 0;
            currentWorkflowId = parseInt(button.dataset.workflowId);

            console.log(`Opening parameters modal for step ${currentStepIndex} (ID: ${currentStepId})`);

            // Update modal title
            const modalTitle = document.querySelector('#parameters-modal-label');
            modalTitle.textContent = `Edit Parameters for Step ${currentStepIndex + 1}`;

            // Clear previous content
            const container = document.querySelector('#modal-parameters-container');
            container.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"></div><p>Loading parameters...</p></div>';

            // Show the modal while loading
            parametersModal.show();

            // Load parameters via AJAX
            fetch(`${window.location.pathname}/GetStepParametersJson?workflowId=${currentWorkflowId}&stepIndex=${currentStepIndex}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Store step ID if it was returned
                        if (data.stepId) {
                            currentStepId = data.stepId;
                        }

                        // Render parameter editors
                        renderParameterEditors(container, data);
                    } else {
                        container.innerHTML = `<div class="alert alert-danger">${data.message || 'Failed to load parameters'}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading parameters:', error);
                    container.innerHTML = `<div class="alert alert-danger">Error loading parameters: ${error.message}</div>`;
                });
        }

        function renderParameterEditors(container, data) {
            container.innerHTML = `
                        <div class="row">
                            <div class="col-md-12">
                                <div class="">
                                    <div class=" d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Role Parameters</h5>
                                        <button type="button" class="btn btn-sm btn-primary add-parameter-btn mb-3" data-param-type="roleParameters">
                                            <i class="mdi mdi-plus"></i> Add New
                                        </button>
                                    </div>
                                    <div class="">
                                        <div id="role-parameters-container">
                                            ${renderParameterTable('roleParameters', data.roleParameters)}
                                        </div>
                                    </div>
                                </div>
                                        <hr/>
                            </div>
                            
                            <div class="col-md-12">
                                <div class="">
                                    <div class=" d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Conditions</h5>
                                        <button type="button" class="btn btn-sm btn-primary add-parameter-btn mb-3" data-param-type="conditions">
                                            <i class="mdi mdi-plus"></i> Add New
                                        </button>
                                    </div>
                                    <div class="">
                                        <div id="conditions-container">
                                            ${renderParameterTable('conditions', data.conditions)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
        }

        function renderParameterTable(paramType, parameters) {
            if (!parameters || Object.keys(parameters).length === 0) {
                return `<div class="alert alert-info">No ${paramType} defined yet. Click "Add New" to create one.</div>`;
            }

            let tableHtml = `
                        <table class="table table-sm parameter-table" data-param-type="${paramType}">
                            <thead>
                                <tr>
                                    <th>Key</th>
                                    <th>Value</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                    `;

            for (const [key, value] of Object.entries(parameters)) {
                tableHtml += `
                            <tr class="parameter-row">
                                <td>
                                    <input type="text" class="form-control param-key" value="${escapeHtml(key)}" readonly />
                                </td>
                                <td>
                                    <input type="text" class="form-control param-value" value="${escapeHtml(value)}" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-danger remove-parameter-btn">
                                        <i class="mdi mdi-delete"></i>
                                    </button>
                                </td>
                            </tr>
                        `;
            }

            tableHtml += `
                            </tbody>
                        </table>
                    `;

            return tableHtml;
        }

        function addParameter(e) {
            const button = e.target.closest('.add-parameter-btn');
            const paramType = button.dataset.paramType;
            const container = document.querySelector(`#${paramType}-container`);

            // If there's an alert, remove it
            const alert = container.querySelector('.alert');
            if (alert) {
                alert.remove();
            }

            // If there's no table yet, create one
            let table = container.querySelector('.parameter-table');
            if (!table) {
                table = document.createElement('table');
                table.className = 'table table-sm parameter-table';
                table.dataset.paramType = paramType;
                table.innerHTML = `
                            <thead>
                                <tr>
                                    <th>Key</th>
                                    <th>Value</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        `;
                container.appendChild(table);
            }

            // Create new row with editable key
            const tbody = table.querySelector('tbody');
            const newRow = document.createElement('tr');
            newRow.className = 'parameter-row';
            newRow.innerHTML = `
                        <td>
                            <input type="text" class="form-control param-key" placeholder="Enter key" />
                        </td>
                        <td>
                            <input type="text" class="form-control param-value" placeholder="Enter value" />
                        </td>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger remove-parameter-btn">
                                <i class="mdi mdi-delete"></i>
                            </button>
                        </td>
                    `;

            tbody.appendChild(newRow);
        }

        function removeParameter(e) {
            const button = e.target.closest('.remove-parameter-btn');
            const row = button.closest('.parameter-row');
            const table = row.closest('.parameter-table');
            row.remove();

            // If no rows left, show the alert
            if (table.querySelectorAll('.parameter-row').length === 0) {
                const container = table.closest('[id$="-container"]');
                const paramType = table.dataset.paramType;
                table.remove();

                container.innerHTML = `<div class="alert alert-info">No ${paramType} defined yet. Click "Add New" to create one.</div>`;
            }
        }

        function saveParameters() {
            console.log('Saving parameters for step index:', currentStepIndex);

            // Collect parameters from the modal
            const roleParameters = {};
            const conditions = {};

            // Collect role parameters
            const roleParamTable = document.querySelector('#role-parameters-container .parameter-table');
            if (roleParamTable) {
                roleParamTable.querySelectorAll('.parameter-row').forEach(row => {
                    const key = row.querySelector('.param-key').value.trim();
                    const value = row.querySelector('.param-value').value.trim();
                    if (key) {
                        roleParameters[key] = value;
                    }
                });
            }

            // Collect conditions
            const conditionsTable = document.querySelector('#conditions-container .parameter-table');
            if (conditionsTable) {
                conditionsTable.querySelectorAll('.parameter-row').forEach(row => {
                    const key = row.querySelector('.param-key').value.trim();
                    const value = row.querySelector('.param-value').value.trim();
                    if (key) {
                        conditions[key] = value;
                    }
                });
            }

            const data = {
                workflowId: currentWorkflowId,
                stepId: currentStepId,
                stepIndex: currentStepIndex,
                roleParameters,
                conditions
            };

            console.log('Saving parameters:', data);

            // Show saving indicator
            const saveButton = document.querySelector('.save-parameters-btn');
            const originalText = saveButton.innerHTML;
            saveButton.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...`;
            saveButton.disabled = true;

            // Send the data to the server
            fetch(`${window.location.pathname}/SaveStepParametersJson`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(response => {
                    console.log('Save response:', response);

                    if (response.success) {
                        // Update the hidden fields in the main form
                        const roleParamsJsonField = document.querySelector(`#role-params-json-${currentStepIndex}`);
                        const conditionsJsonField = document.querySelector(`#conditions-json-${currentStepIndex}`);

                        if (roleParamsJsonField) {
                            roleParamsJsonField.value = response.roleParametersJson || JSON.stringify(roleParameters);
                        }

                        if (conditionsJsonField) {
                            conditionsJsonField.value = response.conditionsJson || JSON.stringify(conditions);
                        }

                        // Close the modal
                        parametersModal.hide();

                        // Show a success toast or message
                        showToast('Success', 'Parameters saved successfully!', 'success');
                    } else {
                        // Show error message
                        showToast('Error', response.message || 'Failed to save parameters', 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error saving parameters:', error);
                    showToast('Error', `Failed to save parameters: ${error.message}`, 'danger');
                })
                .finally(() => {
                    // Restore save button
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                });
        }

        // Helper function to show a toast notification
        function showToast(title, message, type = 'info') {
            // You can implement this with your preferred toast library
            // or create a simple custom implementation
            console.log(`${title}: ${message}`);

            // Simple implementation using bootstrap toast:
            const toastContainer = document.getElementById('toast-container') || createToastContainer();
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');

            toast.innerHTML = `
                        <div class="d-flex">
                            <div class="toast-body">
                                <strong>${title}</strong>: ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    `;

            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();

            // Automatically remove toast from DOM after it's hidden
            toast.addEventListener('hidden.bs.toast', function () {
                toast.remove();
            });
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'position-fixed top-0 end-0 p-3';
            container.style.zIndex = '1050';
            document.body.appendChild(container);
            return container;
        }

        // Helper function to escape HTML
        function escapeHtml(str) {
            if (!str) return '';
            return str
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
        }
    </script>
}