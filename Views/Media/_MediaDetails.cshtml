@using MRIV.ViewModels

@model MediaFileDetailsViewModel

<div class="media-details">
    <!-- File Preview -->
    <div class="text-center mb-4">
        @if (Model.IsImage)
        {
            <img src="@Model.PreviewUrl" alt="@Model.Alt" class="img-fluid rounded" style="max-height: 300px;">
        }
        else
        {
            <div class="file-preview-placeholder">
                <i class="@Model.FileIcon display-1 text-muted"></i>
                <h5 class="mt-2">@Model.Extension.ToUpper() File</h5>
            </div>
        }
    </div>

    <!-- File Information -->
    <div class="file-info-section">
        <h6 class="section-title">File Information</h6>
        <div class="info-grid">
            <div class="info-item">
                <label>Name:</label>
                <span>@Model.FileName</span>
            </div>
            <div class="info-item">
                <label>Size:</label>
                <span>@Model.FormattedSize</span>
            </div>
            <div class="info-item">
                <label>Type:</label>
                <span>@Model.MimeType</span>
            </div>
            <div class="info-item">
                <label>Extension:</label>
                <span>@Model.Extension</span>
            </div>
            <div class="info-item">
                <label>Created:</label>
                <span>@Model.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
            </div>
            @if (Model.UpdatedAt.HasValue)
            {
                <div class="info-item">
                    <label>Modified:</label>
                    <span>@Model.UpdatedAt.Value.ToString("MMM dd, yyyy HH:mm")</span>
                </div>
            }
        </div>
    </div>

    <!-- Related Entity -->
    @if (!string.IsNullOrEmpty(Model.RelatedEntityName))
    {
        <div class="related-entity-section mt-4">
            <h6 class="section-title">Related Entity</h6>
            <div class="info-grid">
                <div class="info-item">
                    <label>Type:</label>
                    <span class="badge bg-primary">@Model.ModelType</span>
                </div>
                <div class="info-item">
                    <label>Name:</label>
                    @if (!string.IsNullOrEmpty(Model.RelatedEntityUrl) && Model.RelatedEntityUrl != "#")
                    {
                        <a href="@Model.RelatedEntityUrl" class="text-decoration-none" target="_blank">
                            @Model.RelatedEntityName <i class="ri-external-link-line ms-1"></i>
                        </a>
                    }
                    else
                    {
                        <span>@Model.RelatedEntityName</span>
                    }
                </div>
                @if (!string.IsNullOrEmpty(Model.Collection))
                {
                    <div class="info-item">
                        <label>Collection:</label>
                        <span class="badge bg-secondary">@Model.Collection</span>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Additional Properties -->
    @if (!string.IsNullOrEmpty(Model.Alt) || !string.IsNullOrEmpty(Model.CustomProperties))
    {
        <div class="additional-properties-section mt-4">
            <h6 class="section-title">Additional Properties</h6>
            <div class="info-grid">
                @if (!string.IsNullOrEmpty(Model.Alt))
                {
                    <div class="info-item">
                        <label>Alt Text:</label>
                        <span>@Model.Alt</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.CustomProperties))
                {
                    <div class="info-item">
                        <label>Custom Properties:</label>
                        <pre class="custom-properties">@Model.CustomProperties</pre>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Actions -->
    <div class="file-actions-section mt-4">
        <h6 class="section-title">Actions</h6>
        <div class="d-grid gap-2">
            <button class="btn btn-primary" onclick="downloadFile(@Model.Id)">
                <i class="ri-download-line me-2"></i>Download
            </button>
            <button class="btn btn-outline-secondary" onclick="copyFileUrl('@Model.PreviewUrl')">
                <i class="ri-link me-2"></i>Copy URL
            </button>
            <button class="btn btn-outline-danger" onclick="deleteFileFromDetails(@Model.Id)">
                <i class="ri-delete-bin-line me-2"></i>Delete
            </button>
        </div>
    </div>
</div>

<style>
    .media-details {
        padding: 0;
    }

    .file-preview-placeholder {
        padding: 2rem;
        background: var(--vz-light);
        border-radius: var(--vz-border-radius);
        text-align: center;
    }

    .section-title {
        font-weight: 600;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--vz-border-color);
        color: var(--vz-heading-color);
    }

    .info-grid {
        display: grid;
        gap: 0.75rem;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding: 0.5rem 0;
        border-bottom: 1px solid rgba(var(--vz-border-color-rgb), 0.3);
    }

    .info-item:last-child {
        border-bottom: none;
    }

    .info-item label {
        font-weight: 500;
        color: var(--vz-secondary);
        margin-bottom: 0;
        min-width: 80px;
        flex-shrink: 0;
    }

    .info-item span {
        text-align: right;
        word-break: break-word;
        flex: 1;
        margin-left: 1rem;
    }

    .custom-properties {
        background: var(--vz-light);
        border: 1px solid var(--vz-border-color);
        border-radius: var(--vz-border-radius);
        padding: 0.5rem;
        font-size: 0.875rem;
        margin: 0;
        white-space: pre-wrap;
        word-break: break-word;
    }

    .file-actions-section .btn {
        justify-content: flex-start;
    }

    .badge {
        font-size: 0.75rem;
    }
</style>

<script>
    function copyFileUrl(url) {
        const fullUrl = window.location.origin + url;
        navigator.clipboard.writeText(fullUrl).then(function() {
            // Show success message
            showToast('URL copied to clipboard', 'success');
        }).catch(function() {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = fullUrl;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showToast('URL copied to clipboard', 'success');
        });
    }

    function deleteFileFromDetails(fileId) {
        if (confirm('Are you sure you want to delete this file? This action cannot be undone.')) {
            $.post('@Url.Action("Delete", "Media")', { id: fileId })
            .done(function(response) {
                if (response.success) {
                    // Close offcanvas
                    const offcanvas = bootstrap.Offcanvas.getInstance(document.getElementById('mediaDetailsOffcanvas'));
                    if (offcanvas) {
                        offcanvas.hide();
                    }
                    
                    // Reload the file list
                    location.reload();
                    
                    showToast('File deleted successfully', 'success');
                } else {
                    showToast('Error: ' + response.message, 'error');
                }
            })
            .fail(function() {
                showToast('Error deleting file', 'error');
            });
        }
    }

    function showToast(message, type) {
        // Simple toast implementation - you can replace with your preferred toast library
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
        `;
        document.body.appendChild(toast);
        
        // Auto remove after 3 seconds
        setTimeout(() => {
            if (toast.parentElement) {
                toast.remove();
            }
        }, 3000);
    }
</script>
