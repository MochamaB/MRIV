@using MRIV.ViewModels

@model MediaFileManagerViewModel
@{
    ViewData["Title"] = "Media Manager";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


    <style>
    .file-manager-container {
        display: flex;
        flex: 1; /* fills remaining space */
        min-height: 0;
    }
        
        .file-manager-sidebar {
            width: 280px;
            min-width: 280px;
            border-right: 1px solid var(--vz-border-color);
            background: var(--vz-card-bg);
            padding: 1.5rem;
        }
        
        .file-manager-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .file-manager-toolbar {
            padding: 1.5rem;
            border-bottom: 1px solid var(--vz-border-color);
            background: var(--vz-card-bg);
        }
        
        .file-grid {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
        }
        
        .file-card {
            border: 1px solid var(--vz-border-color);
            border-radius: var(--vz-border-radius);
            padding: 1rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
            height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            background: var(--vz-card-bg);
        }
        
        .file-card:hover {
            border-color: var(--vz-primary);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }
        
        .file-card.selected {
            border-color: var(--vz-primary);
            background-color: rgba(var(--vz-primary-rgb), 0.1);
        }
        
        .file-thumbnail {
            width: 80px;
            height: 80px;
            margin: 0 auto 0.5rem;
            border-radius: var(--vz-border-radius);
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            background: var(--vz-light);
        }
        
        .file-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .file-thumbnail i {
            font-size: 2.5rem;
            color: var(--vz-secondary);
        }
        
        .file-name {
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 0.25rem;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        
        .file-meta {
            font-size: 0.75rem;
            color: var(--vz-secondary);
        }
        
        .folder-item {
            display: flex;
            align-items: center;
            padding: 0.75rem;
            border-radius: var(--vz-border-radius);
            cursor: pointer;
            transition: all 0.2s ease;
            margin-bottom: 0.5rem;
            text-decoration: none;
            color: inherit;
        }
        
        .folder-item:hover {
            background-color: var(--vz-light);
            color: inherit;
            text-decoration: none;
        }
        
        .folder-item.active {
            background-color: var(--vz-secondary);
            color: white;
        }
        
        .folder-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 0;
            background: var(--vz-light);
            margin-right: 0.75rem;
        }
        
        .folder-item.active .folder-icon {
            background: rgba(255,255,255,0.2);
        }
        
        .folder-details h6 {
            margin: 0;
            font-size: 0.875rem;
            font-weight: 500;
        }
        
        .folder-details small {
            color: var(--vz-secondary);
            font-size: 0.75rem;
        }
        
        .folder-item.active .folder-details small {
            color: rgba(255,255,255,0.8);
        }
        
        .storage-info {
            background: var(--vz-card-bg);
            border: 1px solid var(--vz-border-color);
            border-radius: var(--vz-border-radius);
            padding: 1.5rem;
            margin-top: 1.5rem;
        }
        
        .storage-progress {
            height: 8px;
            background: var(--vz-light);
            border-radius: 4px;
            overflow: hidden;
            margin: 0.75rem 0;
        }
        
        .storage-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--vz-primary), var(--vz-secondary));
            border-radius: 4px;
            transition: width 0.3s ease;
        }
        
        .storage-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 0.75rem;
        }
        
        .storage-title {
            font-weight: 600;
            color: var(--vz-heading-color);
            margin: 0;
        }
        
        .storage-usage {
            color: var(--vz-info);
            font-weight: 500;
            font-size: 0.875rem;
        }
        
        .storage-details {
            font-size: 0.75rem;
            color: var(--vz-secondary);
            margin: 0;
        }
        
        .view-toggle .btn {
            border: 1px solid var(--vz-border-color);
        }
        
        .view-toggle .btn.active {
            background-color: var(--vz-primary);
            border-color: var(--vz-primary);
            color: white;
        }
        
        .file-list-view .file-row {
            display: flex;
            align-items: center;
            padding: 0.75rem;
            border-bottom: 1px solid var(--vz-border-color);
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        
        .file-list-view .file-row:hover {
            background-color: var(--vz-light);
        }
        
        .file-list-view .file-thumbnail {
            width: 40px;
            height: 40px;
            margin-right: 1rem;
            margin-bottom: 0;
        }
        
        .file-list-view .file-thumbnail i {
            font-size: 1.5rem;
        }
        
        .file-info {
            flex: 1;
        }
        
        .file-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        @@media (max-width: 768px) {
            .file-manager-container {
                flex-direction: column;
                height: auto;
            }
            
            .file-manager-sidebar {
                width: 100%;
                min-width: auto;
                border-right: none;
                border-bottom: 1px solid var(--vz-border-color);
            }
        }
    </style>


    <div class="container-fluid">
        <!-- Page Title -->
       
        <!-- File Manager Container -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Media Manager</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="file-manager-container">
                            <!-- Left Sidebar -->
                            <div class="file-manager-sidebar">
                                <!-- Folders -->
                                <div class="folders-list">
                                    <h6 class="mb-3">Folders</h6>
                                    @foreach (var folder in Model.Folders)
                                    {
                                        <a href="#" class="folder-item @(Model.CurrentFolder == folder.Path ? "active" : "")" 
                                           data-folder="@folder.Path">
                                            <div class="folder-icon">
                                                <i class="@folder.Icon"></i>
                                            </div>
                                            <div class="folder-details flex-grow-1">
                                                <h6>@folder.DisplayName</h6>
                                                <small>@folder.FileCount files â€¢ @folder.FormattedSize</small>
                                            </div>
                                        </a>
                                    }
                                </div>

                                <!-- Quick Filters -->
                                <div class="mt-4">
                                    <h6 class="mb-3">Quick Filters</h6>
                                    <div class="d-flex flex-column gap-2">
                                        <button class="btn btn-outline-secondary btn-sm text-start" data-filter="images">
                                            <i class="ri-image-line me-2"></i> Images
                                        </button>
                                        <button class="btn btn-outline-secondary btn-sm text-start" data-filter="documents">
                                            <i class="ri-file-line me-2"></i> Documents
                                        </button>
                                        <button class="btn btn-outline-secondary btn-sm text-start" data-filter="recent">
                                            <i class="ri-time-line me-2"></i> Recent
                                        </button>
                                    </div>
                                </div>

                                <!-- Storage Usage -->
                                <div class="storage-info">
                                    <div class="storage-header">
                                        <h6 class="storage-title">Storage Usage</h6>
                                    </div>
                                    <div class="storage-header">
                                        <span class="storage-title">Media Storage</span>
                                        <span class="storage-usage">@(FormatFileSize(Model.TotalSize)) Files</span>
                                    </div>
                                    <div class="storage-progress">
                                        <div class="storage-progress-bar" style="width: 25%"></div>
                                    </div>
                                    <p class="storage-details">25% of 100GB used</p>
                                </div>
                            </div>

                            <!-- Main Content -->
                            <div class="file-manager-content">
                                <!-- Toolbar -->
                                <div class="file-manager-toolbar">
                                    <div class="row align-items-center">
                                        <div class="col-md-6">
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="ri-search-line"></i></span>
                                                <input type="text" class="form-control" placeholder="Search files..." 
                                                       id="searchInput" value="@Model.SearchQuery">
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="d-flex justify-content-end align-items-center gap-2">
                                                <!-- Sort Dropdown -->
                                                <div class="dropdown">
                                                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" 
                                                            data-bs-toggle="dropdown">
                                                        <i class="ri-sort-asc me-1"></i> Sort
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a class="dropdown-item" href="#" data-sort="name">Name</a></li>
                                                        <li><a class="dropdown-item" href="#" data-sort="date">Date</a></li>
                                                        <li><a class="dropdown-item" href="#" data-sort="size">Size</a></li>
                                                        <li><a class="dropdown-item" href="#" data-sort="type">Type</a></li>
                                                    </ul>
                                                </div>

                                                <!-- View Toggle -->
                                                <div class="btn-group view-toggle" role="group">
                                                    <button type="button" class="btn @(Model.ViewMode == "grid" ? "active" : "")" 
                                                            data-view="grid">
                                                        <i class="ri-grid-line"></i>
                                                    </button>
                                                    <button type="button" class="btn @(Model.ViewMode == "list" ? "active" : "")" 
                                                            data-view="list">
                                                        <i class="ri-list-check"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- File Grid/List -->
                                <div class="file-grid">
                                    <div id="fileContainer" class="@(Model.ViewMode == "grid" ? "row g-3" : "file-list-view")">
                                        @if (Model.ViewMode == "grid")
                                        {
                                            @foreach (var file in Model.Files)
                                            {
                                                <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                                    <div class="file-card" data-file-id="@file.Id">
                                                        <div class="file-thumbnail">
                                                            @if (file.IsImage)
                                                            {
                                                                <img src="@file.PreviewUrl" alt="@file.Alt" loading="lazy">
                                                            }
                                                            else
                                                            {
                                                                <i class="@file.FileIcon"></i>
                                                            }
                                                        </div>
                                                        <div class="file-name" title="@file.Name">@file.Name</div>
                                                        <div class="file-meta">
                                                            @file.FormattedSize â€¢ @file.CreatedAt.ToString("MMM dd, yyyy")
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            @foreach (var file in Model.Files)
                                            {
                                                <div class="file-row" data-file-id="@file.Id">
                                                    <div class="file-thumbnail">
                                                        @if (file.IsImage)
                                                        {
                                                            <img src="@file.PreviewUrl" alt="@file.Alt" loading="lazy">
                                                        }
                                                        else
                                                        {
                                                            <i class="@file.FileIcon"></i>
                                                        }
                                                    </div>
                                                    <div class="file-info">
                                                        <div class="file-name">@file.Name</div>
                                                        <small class="text-muted">@file.ModelType â€¢ @file.FormattedSize</small>
                                                    </div>
                                                    <div class="file-meta text-muted">
                                                        @file.CreatedAt.ToString("MMM dd, yyyy")
                                                    </div>
                                                    <div class="file-actions">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="downloadFile(@file.Id)">
                                                            <i class="ri-download-line"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteFile(@file.Id)">
                                                            <i class="ri-delete-bin-line"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>

                                    <!-- Pagination -->
                                    @if (Model.TotalPages > 1)
                                    {
                                        <div class="row mt-4">
                                            <div class="col-12">
                                                <nav aria-label="File pagination">
                                                    <ul class="pagination justify-content-center">
                                                        @if (Model.CurrentPage > 1)
                                                        {
                                                            <li class="page-item">
                                                                <a class="page-link" href="#" data-page="@(Model.CurrentPage - 1)">Previous</a>
                                                            </li>
                                                        }
                                                        
                                                        @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                                        {
                                                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                                                <a class="page-link" href="#" data-page="@i">@i</a>
                                                            </li>
                                                        }
                                                        
                                                        @if (Model.CurrentPage < Model.TotalPages)
                                                        {
                                                            <li class="page-item">
                                                                <a class="page-link" href="#" data-page="@(Model.CurrentPage + 1)">Next</a>
                                                            </li>
                                                        }
                                                    </ul>
                                                </nav>
                                            </div>
                                        </div>
                                    }

                                    <!-- Empty State -->
                                    @if (!Model.Files.Any())
                                    {
                                        <div class="text-center py-5">
                                            <i class="ri-folder-open-line display-4 text-muted"></i>
                                            <h5 class="mt-3">No files found</h5>
                                            <p class="text-muted">Try adjusting your search or filter criteria.</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


<!-- Media Details Offcanvas -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="mediaDetailsOffcanvas" aria-labelledby="mediaDetailsLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="mediaDetailsLabel">File Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body" id="mediaDetailsContent">
        <!-- Content loaded via AJAX -->
    </div>
</div>

@functions {
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}

@section Scripts {
    <script>
        $(document).ready(function() {
            let currentFolder = '@Model.CurrentFolder';
            let currentView = '@Model.ViewMode';
            let currentPage = @Model.CurrentPage;
            let currentSort = '@Model.SortBy';
            let currentOrder = '@Model.SortOrder';
            let searchTimeout;

            // Folder navigation
            $('.folder-item').click(function(e) {
                e.preventDefault();
                const folder = $(this).data('folder');
                loadFolder(folder);
            });

            // View toggle
            $('.view-toggle .btn').click(function() {
                const view = $(this).data('view');
                if (view !== currentView) {
                    currentView = view;
                    $('.view-toggle .btn').removeClass('active');
                    $(this).addClass('active');
                    loadFiles();
                }
            });

            // Search
            $('#searchInput').on('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function() {
                    currentPage = 1;
                    loadFiles();
                }, 500);
            });

            // Sort
            $('.dropdown-menu a[data-sort]').click(function(e) {
                e.preventDefault();
                const newSort = $(this).data('sort');
                if (newSort === currentSort) {
                    currentOrder = currentOrder === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort = newSort;
                    currentOrder = 'asc';
                }
                currentPage = 1;
                loadFiles();
            });

            // Pagination
            $(document).on('click', '.page-link', function(e) {
                e.preventDefault();
                const page = $(this).data('page');
                if (page && page !== currentPage) {
                    currentPage = page;
                    loadFiles();
                }
            });

            // File selection
            $(document).on('click', '.file-card, .file-row', function() {
                const fileId = $(this).data('file-id');
                showFileDetails(fileId);
            });

            // Quick filters
            $('[data-filter]').click(function() {
                const filter = $(this).data('filter');
                applyQuickFilter(filter);
            });

            function loadFolder(folder) {
                currentFolder = folder;
                currentPage = 1;
                
                // Update active folder
                $('.folder-item').removeClass('active');
                $(`.folder-item[data-folder="${folder}"]`).addClass('active');
                
                loadFiles();
            }

            function loadFiles() {
                const search = $('#searchInput').val();
                
                $.get('@Url.Action("GetFolderContents", "Media")', {
                    folder: currentFolder,
                    view: currentView,
                    search: search,
                    page: currentPage,
                    sortBy: currentSort,
                    sortOrder: currentOrder
                })
                .done(function(data) {
                    updateFileContainer(data);
                })
                .fail(function() {
                    showAlert('Error loading files', 'danger');
                });
            }

            function updateFileContainer(data) {
                let html = '';
                
                if (currentView === 'grid') {
                    $('#fileContainer').removeClass('file-list-view').addClass('row g-3');
                    data.files.forEach(file => {
                        html += `
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                <div class="file-card" data-file-id="${file.id}">
                                    <div class="file-thumbnail">
                                        ${file.isImage ? 
                                            `<img src="${file.previewUrl}" alt="${file.alt}" loading="lazy">` :
                                            `<i class="${file.fileIcon}"></i>`
                                        }
                                    </div>
                                    <div class="file-name" title="${file.name}">${file.name}</div>
                                    <div class="file-meta">
                                        ${file.formattedSize} â€¢ ${new Date(file.createdAt).toLocaleDateString()}
                                    </div>
                                </div>
                            </div>`;
                    });
                } else {
                    $('#fileContainer').removeClass('row g-3').addClass('file-list-view');
                    data.files.forEach(file => {
                        html += `
                            <div class="file-row" data-file-id="${file.id}">
                                <div class="file-thumbnail">
                                    ${file.isImage ? 
                                        `<img src="${file.previewUrl}" alt="${file.alt}" loading="lazy">` :
                                        `<i class="${file.fileIcon}"></i>`
                                    }
                                </div>
                                <div class="file-info">
                                    <div class="file-name">${file.name}</div>
                                    <small class="text-muted">${file.modelType} â€¢ ${file.formattedSize}</small>
                                </div>
                                <div class="file-meta text-muted">
                                    ${new Date(file.createdAt).toLocaleDateString()}
                                </div>
                                <div class="file-actions">
                                    <button class="btn btn-sm btn-outline-primary" onclick="downloadFile(${file.id})">
                                        <i class="ri-download-line"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteFile(${file.id})">
                                        <i class="ri-delete-bin-line"></i>
                                    </button>
                                </div>
                            </div>`;
                    });
                }

                $('#fileContainer').html(html);
                updatePagination(data);
            }

            function updatePagination(data) {
                // Update pagination logic here
                // This is a simplified version - you might want to implement full pagination update
            }

            function showFileDetails(fileId) {
                $.get('@Url.Action("GetMediaDetails", "Media")', { id: fileId })
                .done(function(data) {
                    $('#mediaDetailsContent').html(data);
                    const offcanvas = new bootstrap.Offcanvas(document.getElementById('mediaDetailsOffcanvas'));
                    offcanvas.show();
                })
                .fail(function() {
                    showAlert('Error loading file details', 'danger');
                });
            }

            function applyQuickFilter(filter) {
                // Implement quick filter logic
                switch(filter) {
                    case 'images':
                        // Filter for image files
                        break;
                    case 'documents':
                        // Filter for document files
                        break;
                    case 'recent':
                        // Sort by recent files
                        break;
                }
            }

            function showAlert(message, type) {
                // Implement alert notification
                console.log(`${type}: ${message}`);
            }
        });

        function downloadFile(fileId) {
            window.location.href = '@Url.Action("Download", "Media")' + '/' + fileId;
        }

        function deleteFile(fileId) {
            if (confirm('Are you sure you want to delete this file?')) {
                $.post('@Url.Action("Delete", "Media")', { id: fileId })
                .done(function(response) {
                    if (response.success) {
                        location.reload(); // Simple reload for now
                    } else {
                        alert('Error: ' + response.message);
                    }
                })
                .fail(function() {
                    alert('Error deleting file');
                });
            }
        }
    </script>
}
